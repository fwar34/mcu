#include <reg51.h>
#include "task.h"

/*============================以下为任务管理器代码============================*/

unsigned char task_id;
unsigned char idata task_sp[MAX_TASKS];//任务的栈指针
unsigned char idata task_stack[MAX_TASKS][MAX_TASK_DEP];//任务堆栈.

unsigned char idata task_queue[MAX_QUEUE_LEN];//任务队列
unsigned char idata *queue_head;
unsigned char idata *queue_tail;
unsigned char queue_len;

void task_init(){
    queue_head = task_queue;
    queue_tail = task_queue;
    queue_len = 0;
}

//任务切换函数(任务调度器)
void task_switch(){
    task_sp[task_id] = SP;
    *queue_head = task_id;

    if(queue_head == task_queue + MAX_QUEUE_LEN - 1)
        queue_head = task_queue;
    else
        queue_head++;

    task_id = *queue_tail;

    if(queue_tail == task_queue + MAX_QUEUE_LEN - 1)
        queue_tail = task_queue;
    else
        queue_tail++;

    SP = task_sp[task_id];
}

//快速任务切换.执行完下个任务后立即回到该任务,而不是按顺序排队.即"插队"
void task_fast_switch(){
    unsigned char temp_tid = task_id;
    task_sp[task_id] = SP;
    task_id = *queue_tail;
    *queue_tail = temp_tid;
    SP = task_sp[task_id];
}

//任务暂停.暂停后需由其它进程唤醒,否则任务一直不会被执行.
void task_wait(){
    task_sp[task_id] = SP;

    queue_len--;

    while(queue_len == 0){
        //无任务可执行,CPU休眠
    }

    task_id = *queue_tail;

    if(queue_tail == task_queue + MAX_QUEUE_LEN - 1)
        queue_tail = task_queue;
    else
        queue_tail++;

    SP = task_sp[task_id];
}

//结束任务
void task_exit(){
    task_sp[task_id] = 0;

    queue_len--;

    while(queue_len == 0){
        //无任务可执行,CPU休眠
    }

    task_id = *queue_tail;

    if(queue_tail == task_queue + MAX_QUEUE_LEN - 1)
        queue_tail = task_queue;
    else
        queue_tail++;

    SP = task_sp[task_id];
}

void os_start(){
    task_id = *queue_tail;
    queue_tail++;
    SP = task_sp[task_id];
}

//任务装入函数.将指定的函数(参数1)装入指定(参数2)的任务槽中.如果该槽中原来就有任务,则原任务丢失,但系统本身不会发生错误.
//#pragma NOREGPARMS
void task_load(unsigned int fn, unsigned char tid){ 
    register unsigned char idata *sp = task_stack[tid];

    *sp = fn & 0xff;
    sp++;
    *sp = fn>>8;

    task_sp[tid] = sp;

    queue_len++;
    *queue_head = tid;
    queue_head++;
} 

//#pragma REGPARMS

