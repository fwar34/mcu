                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module OSAL_Timers
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _osal_set_event
                                     12 	.globl _osal_mem_free
                                     13 	.globl _osal_mem_alloc
                                     14 	.globl _timerHead
                                     15 	.globl _osalTimerInit
                                     16 	.globl _osalAddTimer
                                     17 	.globl _osalFindTimer
                                     18 	.globl _osalDeleteTimer
                                     19 	.globl _osal_start_timerEx
                                     20 	.globl _osal_start_reload_timer
                                     21 	.globl _osal_stop_timerEx
                                     22 	.globl _osal_get_timeoutEx
                                     23 	.globl _osal_timer_num_active
                                     24 	.globl _osalTimerUpdate
                                     25 	.globl _osal_GetSystemClock
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
      000000                         30 _timerHead::
      000000                         31 	.ds 2
      000002                         32 _osal_systemClock:
      000002                         33 	.ds 4
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 
                                     43 ; default segment ordering for linker
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area CONST
                                     48 	.area INITIALIZER
                                     49 	.area CODE
                                     50 
                                     51 ;--------------------------------------------------------
                                     52 ; global & static initialisations
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area GSINIT
                                     56 	.area GSFINAL
                                     57 	.area GSINIT
                                     58 ;--------------------------------------------------------
                                     59 ; Home
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area HOME
                                     63 ;--------------------------------------------------------
                                     64 ; code
                                     65 ;--------------------------------------------------------
                                     66 	.area CODE
                                     67 ;	./src/OSAL_Timers.c: 54: void osalTimerInit( void )
                                     68 ;	-----------------------------------------
                                     69 ;	 function osalTimerInit
                                     70 ;	-----------------------------------------
      000000                         71 _osalTimerInit:
                                     72 ;	./src/OSAL_Timers.c: 56: osal_systemClock = 0;
      000000 5F               [ 1]   73 	clrw	x
      000001 CFu00u04         [ 2]   74 	ldw	_osal_systemClock+2, x
      000004 CFu00u02         [ 2]   75 	ldw	_osal_systemClock+0, x
                                     76 ;	./src/OSAL_Timers.c: 57: }
      000007 81               [ 4]   77 	ret
                                     78 ;	./src/OSAL_Timers.c: 71: osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
                                     79 ;	-----------------------------------------
                                     80 ;	 function osalAddTimer
                                     81 ;	-----------------------------------------
      000008                         82 _osalAddTimer:
      000008 89               [ 2]   83 	pushw	x
                                     84 ;	./src/OSAL_Timers.c: 77: newTimer = osalFindTimer( task_id, event_flag );
      000009 1E 06            [ 2]   85 	ldw	x, (0x06, sp)
      00000B 89               [ 2]   86 	pushw	x
      00000C 7B 07            [ 1]   87 	ld	a, (0x07, sp)
      00000E 88               [ 1]   88 	push	a
      00000F CDr00r7C         [ 4]   89 	call	_osalFindTimer
      000012 5B 03            [ 2]   90 	addw	sp, #3
                                     91 ;	./src/OSAL_Timers.c: 78: if ( newTimer )
      000014 1F 01            [ 2]   92 	ldw	(0x01, sp), x
      000016 27 0F            [ 1]   93 	jreq	00111$
                                     94 ;	./src/OSAL_Timers.c: 81: newTimer->timeout.time32 = timeout;
      000018 1E 01            [ 2]   95 	ldw	x, (0x01, sp)
      00001A 5C               [ 1]   96 	incw	x
      00001B 5C               [ 1]   97 	incw	x
      00001C 16 0A            [ 2]   98 	ldw	y, (0x0a, sp)
      00001E EF 02            [ 2]   99 	ldw	(0x2, x), y
      000020 16 08            [ 2]  100 	ldw	y, (0x08, sp)
      000022 FF               [ 2]  101 	ldw	(x), y
                                    102 ;	./src/OSAL_Timers.c: 83: return ( newTimer );
      000023 1E 01            [ 2]  103 	ldw	x, (0x01, sp)
      000025 20 52            [ 2]  104 	jra	00113$
      000027                        105 00111$:
                                    106 ;	./src/OSAL_Timers.c: 88: newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
      000027 4B 0D            [ 1]  107 	push	#0x0d
      000029 4B 00            [ 1]  108 	push	#0x00
      00002B CDr00r00         [ 4]  109 	call	_osal_mem_alloc
      00002E 5B 02            [ 2]  110 	addw	sp, #2
                                    111 ;	./src/OSAL_Timers.c: 90: if ( newTimer )
      000030 1F 01            [ 2]  112 	ldw	(0x01, sp), x
      000032 27 44            [ 1]  113 	jreq	00108$
                                    114 ;	./src/OSAL_Timers.c: 93: newTimer->task_id = task_id;
      000034 1E 01            [ 2]  115 	ldw	x, (0x01, sp)
      000036 7B 05            [ 1]  116 	ld	a, (0x05, sp)
      000038 E7 08            [ 1]  117 	ld	(0x0008, x), a
                                    118 ;	./src/OSAL_Timers.c: 94: newTimer->event_flag = event_flag;
      00003A 1E 01            [ 2]  119 	ldw	x, (0x01, sp)
      00003C 16 06            [ 2]  120 	ldw	y, (0x06, sp)
      00003E EF 06            [ 2]  121 	ldw	(0x0006, x), y
                                    122 ;	./src/OSAL_Timers.c: 95: newTimer->timeout.time32 = timeout;
      000040 1E 01            [ 2]  123 	ldw	x, (0x01, sp)
      000042 5C               [ 1]  124 	incw	x
      000043 5C               [ 1]  125 	incw	x
      000044 16 0A            [ 2]  126 	ldw	y, (0x0a, sp)
      000046 EF 02            [ 2]  127 	ldw	(0x2, x), y
      000048 16 08            [ 2]  128 	ldw	y, (0x08, sp)
      00004A FF               [ 2]  129 	ldw	(x), y
                                    130 ;	./src/OSAL_Timers.c: 96: newTimer->next = (void *)NULL;
      00004B 1E 01            [ 2]  131 	ldw	x, (0x01, sp)
      00004D 6F 01            [ 1]  132 	clr	(0x1, x)
      00004F 7F               [ 1]  133 	clr	(x)
                                    134 ;	./src/OSAL_Timers.c: 97: newTimer->reloadTimeout = 0;
      000050 1E 01            [ 2]  135 	ldw	x, (0x01, sp)
      000052 1C 00 09         [ 2]  136 	addw	x, #0x0009
      000055 90 5F            [ 1]  137 	clrw	y
      000057 EF 02            [ 2]  138 	ldw	(0x2, x), y
      000059 FF               [ 2]  139 	ldw	(x), y
                                    140 ;	./src/OSAL_Timers.c: 100: if ( timerHead == NULL )
      00005A CEu00u00         [ 2]  141 	ldw	x, _timerHead+0
      00005D 26 07            [ 1]  142 	jrne	00105$
                                    143 ;	./src/OSAL_Timers.c: 103: timerHead = newTimer;
      00005F 1E 01            [ 2]  144 	ldw	x, (0x01, sp)
      000061 CFu00u00         [ 2]  145 	ldw	_timerHead+0, x
      000064 20 0F            [ 2]  146 	jra	00106$
      000066                        147 00105$:
                                    148 ;	./src/OSAL_Timers.c: 108: srchTimer = timerHead;
      000066 90 CEu00u00      [ 2]  149 	ldw	y, _timerHead+0
                                    150 ;	./src/OSAL_Timers.c: 111: while ( srchTimer->next )
      00006A                        151 00101$:
      00006A 93               [ 1]  152 	ldw	x, y
      00006B FE               [ 2]  153 	ldw	x, (x)
      00006C 27 03            [ 1]  154 	jreq	00103$
                                    155 ;	./src/OSAL_Timers.c: 112: srchTimer = srchTimer->next;
      00006E 51               [ 1]  156 	exgw	x, y
      00006F 20 F9            [ 2]  157 	jra	00101$
      000071                        158 00103$:
                                    159 ;	./src/OSAL_Timers.c: 115: srchTimer->next = newTimer;
      000071 1E 01            [ 2]  160 	ldw	x, (0x01, sp)
      000073 90 FF            [ 2]  161 	ldw	(y), x
      000075                        162 00106$:
                                    163 ;	./src/OSAL_Timers.c: 118: return ( newTimer );
      000075 1E 01            [ 2]  164 	ldw	x, (0x01, sp)
                                    165 ;	./src/OSAL_Timers.c: 122: return ( (osalTimerRec_t *)NULL );
      000077 21                     166 	.byte 0x21
      000078                        167 00108$:
      000078 5F               [ 1]  168 	clrw	x
      000079                        169 00113$:
                                    170 ;	./src/OSAL_Timers.c: 125: }
      000079 5B 02            [ 2]  171 	addw	sp, #2
      00007B 81               [ 4]  172 	ret
                                    173 ;	./src/OSAL_Timers.c: 138: osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
                                    174 ;	-----------------------------------------
                                    175 ;	 function osalFindTimer
                                    176 ;	-----------------------------------------
      00007C                        177 _osalFindTimer:
                                    178 ;	./src/OSAL_Timers.c: 143: srchTimer = timerHead;
      00007C 90 CEu00u00      [ 2]  179 	ldw	y, _timerHead+0
                                    180 ;	./src/OSAL_Timers.c: 146: while ( srchTimer )
      000080                        181 00104$:
      000080 90 5D            [ 2]  182 	tnzw	y
      000082 27 12            [ 1]  183 	jreq	00106$
                                    184 ;	./src/OSAL_Timers.c: 148: if ( srchTimer->event_flag == event_flag &&
      000084 93               [ 1]  185 	ldw	x, y
      000085 EE 06            [ 2]  186 	ldw	x, (0x6, x)
      000087 13 04            [ 2]  187 	cpw	x, (0x04, sp)
      000089 26 07            [ 1]  188 	jrne	00102$
                                    189 ;	./src/OSAL_Timers.c: 149: srchTimer->task_id == task_id )
      00008B 93               [ 1]  190 	ldw	x, y
      00008C E6 08            [ 1]  191 	ld	a, (0x8, x)
      00008E 11 03            [ 1]  192 	cp	a, (0x03, sp)
      000090 27 04            [ 1]  193 	jreq	00106$
                                    194 ;	./src/OSAL_Timers.c: 151: break;
      000092                        195 00102$:
                                    196 ;	./src/OSAL_Timers.c: 155: srchTimer = srchTimer->next;
      000092 90 FE            [ 2]  197 	ldw	y, (y)
      000094 20 EA            [ 2]  198 	jra	00104$
      000096                        199 00106$:
                                    200 ;	./src/OSAL_Timers.c: 158: return ( srchTimer );
      000096 93               [ 1]  201 	ldw	x, y
                                    202 ;	./src/OSAL_Timers.c: 159: }
      000097 81               [ 4]  203 	ret
                                    204 ;	./src/OSAL_Timers.c: 171: void osalDeleteTimer( osalTimerRec_t *rmTimer )
                                    205 ;	-----------------------------------------
                                    206 ;	 function osalDeleteTimer
                                    207 ;	-----------------------------------------
      000098                        208 _osalDeleteTimer:
                                    209 ;	./src/OSAL_Timers.c: 174: if ( rmTimer )
      000098 1E 03            [ 2]  210 	ldw	x, (0x03, sp)
      00009A 26 01            [ 1]  211 	jrne	00110$
      00009C 81               [ 4]  212 	ret
      00009D                        213 00110$:
                                    214 ;	./src/OSAL_Timers.c: 178: rmTimer->event_flag = 0;
      00009D 1E 03            [ 2]  215 	ldw	x, (0x03, sp)
      00009F 1C 00 06         [ 2]  216 	addw	x, #0x0006
      0000A2 6F 01            [ 1]  217 	clr	(0x1, x)
      0000A4 7F               [ 1]  218 	clr	(x)
                                    219 ;	./src/OSAL_Timers.c: 180: }
      0000A5 81               [ 4]  220 	ret
                                    221 ;	./src/OSAL_Timers.c: 196: uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
                                    222 ;	-----------------------------------------
                                    223 ;	 function osal_start_timerEx
                                    224 ;	-----------------------------------------
      0000A6                        225 _osal_start_timerEx:
                                    226 ;	./src/OSAL_Timers.c: 201: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      0000A6 9B               [ 1]  227 	sim
      0000A7 9D               [ 1]  228 	nop
      0000A8 9D               [ 1]  229 	nop
                                    230 ;	./src/OSAL_Timers.c: 204: newTimer = osalAddTimer( taskID, event_id, timeout_value );
      0000A9 1E 08            [ 2]  231 	ldw	x, (0x08, sp)
      0000AB 89               [ 2]  232 	pushw	x
      0000AC 1E 08            [ 2]  233 	ldw	x, (0x08, sp)
      0000AE 89               [ 2]  234 	pushw	x
      0000AF 1E 08            [ 2]  235 	ldw	x, (0x08, sp)
      0000B1 89               [ 2]  236 	pushw	x
      0000B2 7B 09            [ 1]  237 	ld	a, (0x09, sp)
      0000B4 88               [ 1]  238 	push	a
      0000B5 CDr00r08         [ 4]  239 	call	_osalAddTimer
      0000B8 5B 07            [ 2]  240 	addw	sp, #7
                                    241 ;	./src/OSAL_Timers.c: 208: return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
      0000BA 5D               [ 2]  242 	tnzw	x
      0000BB 27 02            [ 1]  243 	jreq	00111$
      0000BD 4F               [ 1]  244 	clr	a
      0000BE 81               [ 4]  245 	ret
      0000BF                        246 00111$:
      0000BF A6 08            [ 1]  247 	ld	a, #0x08
                                    248 ;	./src/OSAL_Timers.c: 209: }
      0000C1 81               [ 4]  249 	ret
                                    250 ;	./src/OSAL_Timers.c: 226: uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
                                    251 ;	-----------------------------------------
                                    252 ;	 function osal_start_reload_timer
                                    253 ;	-----------------------------------------
      0000C2                        254 _osal_start_reload_timer:
      0000C2 89               [ 2]  255 	pushw	x
                                    256 ;	./src/OSAL_Timers.c: 231: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      0000C3 9B               [ 1]  257 	sim
      0000C4 9D               [ 1]  258 	nop
      0000C5 9D               [ 1]  259 	nop
                                    260 ;	./src/OSAL_Timers.c: 234: newTimer = osalAddTimer( taskID, event_id, timeout_value );
      0000C6 1E 0A            [ 2]  261 	ldw	x, (0x0a, sp)
      0000C8 89               [ 2]  262 	pushw	x
      0000C9 1E 0A            [ 2]  263 	ldw	x, (0x0a, sp)
      0000CB 89               [ 2]  264 	pushw	x
      0000CC 1E 0A            [ 2]  265 	ldw	x, (0x0a, sp)
      0000CE 89               [ 2]  266 	pushw	x
      0000CF 7B 0B            [ 1]  267 	ld	a, (0x0b, sp)
      0000D1 88               [ 1]  268 	push	a
      0000D2 CDr00r08         [ 4]  269 	call	_osalAddTimer
      0000D5 5B 07            [ 2]  270 	addw	sp, #7
                                    271 ;	./src/OSAL_Timers.c: 235: if ( newTimer )
      0000D7 1F 01            [ 2]  272 	ldw	(0x01, sp), x
      0000D9 27 0C            [ 1]  273 	jreq	00109$
                                    274 ;	./src/OSAL_Timers.c: 238: newTimer->reloadTimeout = timeout_value;
      0000DB 1E 01            [ 2]  275 	ldw	x, (0x01, sp)
      0000DD 1C 00 09         [ 2]  276 	addw	x, #0x0009
      0000E0 16 0A            [ 2]  277 	ldw	y, (0x0a, sp)
      0000E2 EF 02            [ 2]  278 	ldw	(0x2, x), y
      0000E4 16 08            [ 2]  279 	ldw	y, (0x08, sp)
      0000E6 FF               [ 2]  280 	ldw	(x), y
                                    281 ;	./src/OSAL_Timers.c: 241: HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
      0000E7                        282 00109$:
                                    283 ;	./src/OSAL_Timers.c: 243: return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
      0000E7 1E 01            [ 2]  284 	ldw	x, (0x01, sp)
      0000E9 27 02            [ 1]  285 	jreq	00113$
      0000EB 4F               [ 1]  286 	clr	a
      0000EC C5                     287 	.byte 0xc5
      0000ED                        288 00113$:
      0000ED A6 08            [ 1]  289 	ld	a, #0x08
      0000EF                        290 00114$:
                                    291 ;	./src/OSAL_Timers.c: 244: }
      0000EF 85               [ 2]  292 	popw	x
      0000F0 81               [ 4]  293 	ret
                                    294 ;	./src/OSAL_Timers.c: 260: uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
                                    295 ;	-----------------------------------------
                                    296 ;	 function osal_stop_timerEx
                                    297 ;	-----------------------------------------
      0000F1                        298 _osal_stop_timerEx:
                                    299 ;	./src/OSAL_Timers.c: 265: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      0000F1 9B               [ 1]  300 	sim
      0000F2 9D               [ 1]  301 	nop
      0000F3 9D               [ 1]  302 	nop
                                    303 ;	./src/OSAL_Timers.c: 268: foundTimer = osalFindTimer( task_id, event_id );
      0000F4 1E 04            [ 2]  304 	ldw	x, (0x04, sp)
      0000F6 89               [ 2]  305 	pushw	x
      0000F7 7B 05            [ 1]  306 	ld	a, (0x05, sp)
      0000F9 88               [ 1]  307 	push	a
      0000FA CDr00r7C         [ 4]  308 	call	_osalFindTimer
      0000FD 5B 03            [ 2]  309 	addw	sp, #3
                                    310 ;	./src/OSAL_Timers.c: 269: if ( foundTimer )
      0000FF 5D               [ 2]  311 	tnzw	x
      000100 27 07            [ 1]  312 	jreq	00109$
                                    313 ;	./src/OSAL_Timers.c: 271: osalDeleteTimer( foundTimer );
      000102 89               [ 2]  314 	pushw	x
      000103 89               [ 2]  315 	pushw	x
      000104 CDr00r98         [ 4]  316 	call	_osalDeleteTimer
      000107 85               [ 2]  317 	popw	x
      000108 85               [ 2]  318 	popw	x
                                    319 ;	./src/OSAL_Timers.c: 274: HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
      000109                        320 00109$:
                                    321 ;	./src/OSAL_Timers.c: 276: return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
      000109 5D               [ 2]  322 	tnzw	x
      00010A 27 02            [ 1]  323 	jreq	00113$
      00010C 4F               [ 1]  324 	clr	a
      00010D 81               [ 4]  325 	ret
      00010E                        326 00113$:
      00010E A6 06            [ 1]  327 	ld	a, #0x06
                                    328 ;	./src/OSAL_Timers.c: 277: }
      000110 81               [ 4]  329 	ret
                                    330 ;	./src/OSAL_Timers.c: 289: uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
                                    331 ;	-----------------------------------------
                                    332 ;	 function osal_get_timeoutEx
                                    333 ;	-----------------------------------------
      000111                        334 _osal_get_timeoutEx:
      000111 52 04            [ 2]  335 	sub	sp, #4
                                    336 ;	./src/OSAL_Timers.c: 292: uint32 rtrn = 0;
      000113 5F               [ 1]  337 	clrw	x
      000114 1F 03            [ 2]  338 	ldw	(0x03, sp), x
      000116 1F 01            [ 2]  339 	ldw	(0x01, sp), x
                                    340 ;	./src/OSAL_Timers.c: 295: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      000118 9B               [ 1]  341 	sim
      000119 9D               [ 1]  342 	nop
      00011A 9D               [ 1]  343 	nop
                                    344 ;	./src/OSAL_Timers.c: 297: tmr = osalFindTimer( task_id, event_id );
      00011B 1E 08            [ 2]  345 	ldw	x, (0x08, sp)
      00011D 89               [ 2]  346 	pushw	x
      00011E 7B 09            [ 1]  347 	ld	a, (0x09, sp)
      000120 88               [ 1]  348 	push	a
      000121 CDr00r7C         [ 4]  349 	call	_osalFindTimer
      000124 5B 03            [ 2]  350 	addw	sp, #3
      000126 90 93            [ 1]  351 	ldw	y, x
                                    352 ;	./src/OSAL_Timers.c: 299: if ( tmr )
      000128 5D               [ 2]  353 	tnzw	x
      000129 27 0A            [ 1]  354 	jreq	00109$
                                    355 ;	./src/OSAL_Timers.c: 301: rtrn = tmr->timeout.time32;
      00012B 93               [ 1]  356 	ldw	x, y
      00012C 90 EE 04         [ 2]  357 	ldw	y, (0x4, y)
      00012F EE 02            [ 2]  358 	ldw	x, (0x2, x)
      000131 17 03            [ 2]  359 	ldw	(0x03, sp), y
      000133 1F 01            [ 2]  360 	ldw	(0x01, sp), x
                                    361 ;	./src/OSAL_Timers.c: 304: HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
      000135                        362 00109$:
                                    363 ;	./src/OSAL_Timers.c: 306: return rtrn;
      000135 1E 03            [ 2]  364 	ldw	x, (0x03, sp)
      000137 16 01            [ 2]  365 	ldw	y, (0x01, sp)
                                    366 ;	./src/OSAL_Timers.c: 307: }
      000139 5B 04            [ 2]  367 	addw	sp, #4
      00013B 81               [ 4]  368 	ret
                                    369 ;	./src/OSAL_Timers.c: 318: uint8 osal_timer_num_active( void )
                                    370 ;	-----------------------------------------
                                    371 ;	 function osal_timer_num_active
                                    372 ;	-----------------------------------------
      00013C                        373 _osal_timer_num_active:
                                    374 ;	./src/OSAL_Timers.c: 324: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      00013C 9B               [ 1]  375 	sim
      00013D 9D               [ 1]  376 	nop
      00013E 9D               [ 1]  377 	nop
                                    378 ;	./src/OSAL_Timers.c: 327: srchTimer = timerHead;
      00013F CEu00u00         [ 2]  379 	ldw	x, _timerHead+0
                                    380 ;	./src/OSAL_Timers.c: 330: while ( srchTimer != NULL )
      000142 4F               [ 1]  381 	clr	a
      000143                        382 00107$:
      000143 5D               [ 2]  383 	tnzw	x
      000144 26 01            [ 1]  384 	jrne	00125$
      000146 81               [ 4]  385 	ret
      000147                        386 00125$:
                                    387 ;	./src/OSAL_Timers.c: 332: num_timers++;
      000147 4C               [ 1]  388 	inc	a
                                    389 ;	./src/OSAL_Timers.c: 333: srchTimer = srchTimer->next;
      000148 FE               [ 2]  390 	ldw	x, (x)
      000149 20 F8            [ 2]  391 	jra	00107$
                                    392 ;	./src/OSAL_Timers.c: 336: HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
                                    393 ;	./src/OSAL_Timers.c: 338: return num_timers;
                                    394 ;	./src/OSAL_Timers.c: 339: }
      00014B 81               [ 4]  395 	ret
                                    396 ;	./src/OSAL_Timers.c: 350: void osalTimerUpdate( uint32 updateTime )
                                    397 ;	-----------------------------------------
                                    398 ;	 function osalTimerUpdate
                                    399 ;	-----------------------------------------
      00014C                        400 _osalTimerUpdate:
      00014C 52 1A            [ 2]  401 	sub	sp, #26
                                    402 ;	./src/OSAL_Timers.c: 357: timeUnion.time32 = updateTime;
      00014E 16 1F            [ 2]  403 	ldw	y, (0x1f, sp)
      000150 17 07            [ 2]  404 	ldw	(0x07, sp), y
      000152 16 1D            [ 2]  405 	ldw	y, (0x1d, sp)
      000154 17 05            [ 2]  406 	ldw	(0x05, sp), y
                                    407 ;	./src/OSAL_Timers.c: 359: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      000156 9B               [ 1]  408 	sim
      000157 9D               [ 1]  409 	nop
      000158 9D               [ 1]  410 	nop
                                    411 ;	./src/OSAL_Timers.c: 361: osal_systemClock += updateTime;
      000159 90 CEu00u04      [ 2]  412 	ldw	y, _osal_systemClock+2
      00015D 72 F9 1F         [ 2]  413 	addw	y, (0x1f, sp)
      000160 CEu00u02         [ 2]  414 	ldw	x, _osal_systemClock+0
      000163 24 01            [ 1]  415 	jrnc	00240$
      000165 5C               [ 1]  416 	incw	x
      000166                        417 00240$:
      000166 72 FB 1D         [ 2]  418 	addw	x, (0x1d, sp)
      000169 90 CFu00u04      [ 2]  419 	ldw	_osal_systemClock+2, y
      00016D CFu00u02         [ 2]  420 	ldw	_osal_systemClock+0, x
                                    421 ;	./src/OSAL_Timers.c: 365: if ( timerHead != NULL )
      000170 CEu00u00         [ 2]  422 	ldw	x, _timerHead+0
      000173 26 03            [ 1]  423 	jrne	00241$
      000175 CCr03r1B         [ 2]  424 	jp	00153$
      000178                        425 00241$:
                                    426 ;	./src/OSAL_Timers.c: 368: srchTimer = timerHead;
      000178 CEu00u00         [ 2]  427 	ldw	x, _timerHead+0
      00017B 1F 09            [ 2]  428 	ldw	(0x09, sp), x
                                    429 ;	./src/OSAL_Timers.c: 369: prevTimer = (void *)NULL;
      00017D 5F               [ 1]  430 	clrw	x
      00017E 1F 0B            [ 2]  431 	ldw	(0x0b, sp), x
                                    432 ;	./src/OSAL_Timers.c: 372: while ( srchTimer )
      000180                        433 00148$:
      000180 1E 09            [ 2]  434 	ldw	x, (0x09, sp)
      000182 26 03            [ 1]  435 	jrne	00242$
      000184 CCr03r1B         [ 2]  436 	jp	00153$
      000187                        437 00242$:
                                    438 ;	./src/OSAL_Timers.c: 374: osalTimerRec_t *freeTimer = NULL;
      000187 5F               [ 1]  439 	clrw	x
      000188 1F 0D            [ 2]  440 	ldw	(0x0d, sp), x
                                    441 ;	./src/OSAL_Timers.c: 376: HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
      00018A 9B               [ 1]  442 	sim
      00018B 9D               [ 1]  443 	nop
      00018C 9D               [ 1]  444 	nop
                                    445 ;	./src/OSAL_Timers.c: 379: if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
      00018D 1E 07            [ 2]  446 	ldw	x, (0x07, sp)
                                    447 ;	./src/OSAL_Timers.c: 382: if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
      00018F 16 09            [ 2]  448 	ldw	y, (0x09, sp)
      000191 90 5C            [ 1]  449 	incw	y
      000193 90 5C            [ 1]  450 	incw	y
      000195 17 0F            [ 2]  451 	ldw	(0x0f, sp), y
                                    452 ;	./src/OSAL_Timers.c: 379: if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
      000197 5D               [ 2]  453 	tnzw	x
      000198 26 75            [ 1]  454 	jrne	00125$
      00019A 7B 06            [ 1]  455 	ld	a, (0x06, sp)
      00019C 26 71            [ 1]  456 	jrne	00125$
                                    457 ;	./src/OSAL_Timers.c: 382: if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
      00019E 1E 0F            [ 2]  458 	ldw	x, (0x0f, sp)
      0001A0 F6               [ 1]  459 	ld	a, (x)
      0001A1 6B 1A            [ 1]  460 	ld	(0x1a, sp), a
      0001A3 7B 05            [ 1]  461 	ld	a, (0x05, sp)
      0001A5 11 1A            [ 1]  462 	cp	a, (0x1a, sp)
      0001A7 22 0F            [ 1]  463 	jrugt	00119$
                                    464 ;	./src/OSAL_Timers.c: 385: srchTimer->timeout.time8[0] -= timeUnion.time8[0];
      0001A9 7B 05            [ 1]  465 	ld	a, (0x05, sp)
      0001AB 6B 1A            [ 1]  466 	ld	(0x1a, sp), a
      0001AD 1E 0F            [ 2]  467 	ldw	x, (0x0f, sp)
      0001AF F6               [ 1]  468 	ld	a, (x)
      0001B0 10 1A            [ 1]  469 	sub	a, (0x1a, sp)
      0001B2 1E 0F            [ 2]  470 	ldw	x, (0x0f, sp)
      0001B4 F7               [ 1]  471 	ld	(x), a
      0001B5 CCr02r5E         [ 2]  472 	jp	00126$
      0001B8                        473 00119$:
                                    474 ;	./src/OSAL_Timers.c: 390: if (srchTimer->timeout.time32 > timeUnion.time32)
      0001B8 1E 0F            [ 2]  475 	ldw	x, (0x0f, sp)
      0001BA E6 03            [ 1]  476 	ld	a, (0x3, x)
      0001BC 6B 1A            [ 1]  477 	ld	(0x1a, sp), a
      0001BE E6 02            [ 1]  478 	ld	a, (0x2, x)
      0001C0 FE               [ 2]  479 	ldw	x, (x)
      0001C1 1F 17            [ 2]  480 	ldw	(0x17, sp), x
      0001C3 1E 07            [ 2]  481 	ldw	x, (0x07, sp)
      0001C5 16 05            [ 2]  482 	ldw	y, (0x05, sp)
      0001C7 88               [ 1]  483 	push	a
      0001C8 9F               [ 1]  484 	ld	a, xl
      0001C9 11 1B            [ 1]  485 	cp	a, (0x1b, sp)
      0001CB 9E               [ 1]  486 	ld	a, xh
      0001CC 12 01            [ 1]  487 	sbc	a, (1, sp)
      0001CE 90 9F            [ 1]  488 	ld	a, yl
      0001D0 12 19            [ 1]  489 	sbc	a, (0x19, sp)
      0001D2 90 9E            [ 1]  490 	ld	a, yh
      0001D4 12 18            [ 1]  491 	sbc	a, (0x18, sp)
      0001D6 5B 01            [ 2]  492 	addw	sp, #1
      0001D8 24 2C            [ 1]  493 	jrnc	00116$
                                    494 ;	./src/OSAL_Timers.c: 392: srchTimer->timeout.time32 -= timeUnion.time32;
      0001DA 1E 0F            [ 2]  495 	ldw	x, (0x0f, sp)
      0001DC 90 93            [ 1]  496 	ldw	y, x
      0001DE 90 EE 02         [ 2]  497 	ldw	y, (0x2, y)
      0001E1 FE               [ 2]  498 	ldw	x, (x)
      0001E2 1F 01            [ 2]  499 	ldw	(0x01, sp), x
      0001E4 1E 07            [ 2]  500 	ldw	x, (0x07, sp)
      0001E6 1F 15            [ 2]  501 	ldw	(0x15, sp), x
      0001E8 1E 05            [ 2]  502 	ldw	x, (0x05, sp)
      0001EA 72 F2 15         [ 2]  503 	subw	y, (0x15, sp)
      0001ED 7B 02            [ 1]  504 	ld	a, (0x02, sp)
      0001EF 89               [ 2]  505 	pushw	x
      0001F0 12 02            [ 1]  506 	sbc	a, (2, sp)
      0001F2 85               [ 2]  507 	popw	x
      0001F3 6B 18            [ 1]  508 	ld	(0x18, sp), a
      0001F5 7B 01            [ 1]  509 	ld	a, (0x01, sp)
      0001F7 89               [ 2]  510 	pushw	x
      0001F8 12 01            [ 1]  511 	sbc	a, (1, sp)
      0001FA 85               [ 2]  512 	popw	x
      0001FB 6B 17            [ 1]  513 	ld	(0x17, sp), a
      0001FD 1E 0F            [ 2]  514 	ldw	x, (0x0f, sp)
      0001FF EF 02            [ 2]  515 	ldw	(0x2, x), y
      000201 16 17            [ 2]  516 	ldw	y, (0x17, sp)
      000203 FF               [ 2]  517 	ldw	(x), y
      000204 20 58            [ 2]  518 	jra	00126$
      000206                        519 00116$:
                                    520 ;	./src/OSAL_Timers.c: 396: srchTimer->timeout.time32 = 0;
      000206 1E 0F            [ 2]  521 	ldw	x, (0x0f, sp)
      000208 90 5F            [ 1]  522 	clrw	y
      00020A EF 02            [ 2]  523 	ldw	(0x2, x), y
      00020C FF               [ 2]  524 	ldw	(x), y
      00020D 20 4F            [ 2]  525 	jra	00126$
      00020F                        526 00125$:
                                    527 ;	./src/OSAL_Timers.c: 403: if (srchTimer->timeout.time32 > timeUnion.time32)
      00020F 1E 0F            [ 2]  528 	ldw	x, (0x0f, sp)
      000211 90 93            [ 1]  529 	ldw	y, x
      000213 90 EE 02         [ 2]  530 	ldw	y, (0x2, y)
      000216 17 19            [ 2]  531 	ldw	(0x19, sp), y
      000218 FE               [ 2]  532 	ldw	x, (x)
      000219 1F 17            [ 2]  533 	ldw	(0x17, sp), x
      00021B 1E 07            [ 2]  534 	ldw	x, (0x07, sp)
      00021D 16 05            [ 2]  535 	ldw	y, (0x05, sp)
      00021F 13 19            [ 2]  536 	cpw	x, (0x19, sp)
      000221 90 9F            [ 1]  537 	ld	a, yl
      000223 12 18            [ 1]  538 	sbc	a, (0x18, sp)
      000225 90 9E            [ 1]  539 	ld	a, yh
      000227 12 17            [ 1]  540 	sbc	a, (0x17, sp)
      000229 24 2C            [ 1]  541 	jrnc	00122$
                                    542 ;	./src/OSAL_Timers.c: 405: srchTimer->timeout.time32 -= timeUnion.time32;
      00022B 1E 0F            [ 2]  543 	ldw	x, (0x0f, sp)
      00022D 90 93            [ 1]  544 	ldw	y, x
      00022F 90 EE 02         [ 2]  545 	ldw	y, (0x2, y)
      000232 FE               [ 2]  546 	ldw	x, (x)
      000233 1F 01            [ 2]  547 	ldw	(0x01, sp), x
      000235 1E 07            [ 2]  548 	ldw	x, (0x07, sp)
      000237 1F 15            [ 2]  549 	ldw	(0x15, sp), x
      000239 1E 05            [ 2]  550 	ldw	x, (0x05, sp)
      00023B 72 F2 15         [ 2]  551 	subw	y, (0x15, sp)
      00023E 7B 02            [ 1]  552 	ld	a, (0x02, sp)
      000240 89               [ 2]  553 	pushw	x
      000241 12 02            [ 1]  554 	sbc	a, (2, sp)
      000243 85               [ 2]  555 	popw	x
      000244 6B 18            [ 1]  556 	ld	(0x18, sp), a
      000246 7B 01            [ 1]  557 	ld	a, (0x01, sp)
      000248 89               [ 2]  558 	pushw	x
      000249 12 01            [ 1]  559 	sbc	a, (1, sp)
      00024B 85               [ 2]  560 	popw	x
      00024C 6B 17            [ 1]  561 	ld	(0x17, sp), a
      00024E 1E 0F            [ 2]  562 	ldw	x, (0x0f, sp)
      000250 EF 02            [ 2]  563 	ldw	(0x2, x), y
      000252 16 17            [ 2]  564 	ldw	y, (0x17, sp)
      000254 FF               [ 2]  565 	ldw	(x), y
      000255 20 07            [ 2]  566 	jra	00126$
      000257                        567 00122$:
                                    568 ;	./src/OSAL_Timers.c: 409: srchTimer->timeout.time32 = 0;
      000257 1E 0F            [ 2]  569 	ldw	x, (0x0f, sp)
      000259 90 5F            [ 1]  570 	clrw	y
      00025B EF 02            [ 2]  571 	ldw	(0x2, x), y
      00025D FF               [ 2]  572 	ldw	(x), y
      00025E                        573 00126$:
                                    574 ;	./src/OSAL_Timers.c: 414: if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
      00025E 1E 0F            [ 2]  575 	ldw	x, (0x0f, sp)
      000260 FE               [ 2]  576 	ldw	x, (x)
      000261 1F 19            [ 2]  577 	ldw	(0x19, sp), x
      000263 1E 09            [ 2]  578 	ldw	x, (0x09, sp)
      000265 5C               [ 1]  579 	incw	x
      000266 5C               [ 1]  580 	incw	x
                                    581 ;	./src/OSAL_Timers.c: 415: (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
      000267 16 09            [ 2]  582 	ldw	y, (0x09, sp)
      000269 72 A9 00 06      [ 2]  583 	addw	y, #0x0006
      00026D 17 11            [ 2]  584 	ldw	(0x11, sp), y
                                    585 ;	./src/OSAL_Timers.c: 414: if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
      00026F 5C               [ 1]  586 	incw	x
      000270 5C               [ 1]  587 	incw	x
      000271 1F 13            [ 2]  588 	ldw	(0x13, sp), x
      000273 1E 19            [ 2]  589 	ldw	x, (0x19, sp)
      000275 26 3B            [ 1]  590 	jrne	00129$
      000277 1E 13            [ 2]  591 	ldw	x, (0x13, sp)
      000279 FE               [ 2]  592 	ldw	x, (x)
      00027A 26 36            [ 1]  593 	jrne	00129$
                                    594 ;	./src/OSAL_Timers.c: 415: (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
      00027C 1E 09            [ 2]  595 	ldw	x, (0x09, sp)
      00027E 1C 00 09         [ 2]  596 	addw	x, #0x0009
      000281 1F 15            [ 2]  597 	ldw	(0x15, sp), x
      000283 90 93            [ 1]  598 	ldw	y, x
      000285 90 EE 02         [ 2]  599 	ldw	y, (0x2, y)
      000288 FE               [ 2]  600 	ldw	x, (x)
      000289 90 5D            [ 2]  601 	tnzw	y
      00028B 26 03            [ 1]  602 	jrne	00250$
      00028D 5D               [ 2]  603 	tnzw	x
      00028E 27 22            [ 1]  604 	jreq	00129$
      000290                        605 00250$:
      000290 1E 11            [ 2]  606 	ldw	x, (0x11, sp)
      000292 FE               [ 2]  607 	ldw	x, (x)
      000293 27 1D            [ 1]  608 	jreq	00129$
                                    609 ;	./src/OSAL_Timers.c: 418: osal_set_event( srchTimer->task_id, srchTimer->event_flag );
      000295 16 09            [ 2]  610 	ldw	y, (0x09, sp)
      000297 90 E6 08         [ 1]  611 	ld	a, (0x8, y)
      00029A 89               [ 2]  612 	pushw	x
      00029B 88               [ 1]  613 	push	a
      00029C CDr00r00         [ 4]  614 	call	_osal_set_event
      00029F 5B 03            [ 2]  615 	addw	sp, #3
                                    616 ;	./src/OSAL_Timers.c: 421: srchTimer->timeout.time32 = srchTimer->reloadTimeout;
      0002A1 1E 15            [ 2]  617 	ldw	x, (0x15, sp)
      0002A3 90 93            [ 1]  618 	ldw	y, x
      0002A5 90 EE 02         [ 2]  619 	ldw	y, (0x2, y)
      0002A8 FE               [ 2]  620 	ldw	x, (x)
      0002A9 1F 17            [ 2]  621 	ldw	(0x17, sp), x
      0002AB 1E 0F            [ 2]  622 	ldw	x, (0x0f, sp)
      0002AD EF 02            [ 2]  623 	ldw	(0x2, x), y
      0002AF 16 17            [ 2]  624 	ldw	y, (0x17, sp)
      0002B1 FF               [ 2]  625 	ldw	(x), y
      0002B2                        626 00129$:
                                    627 ;	./src/OSAL_Timers.c: 425: if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
      0002B2 1E 0F            [ 2]  628 	ldw	x, (0x0f, sp)
      0002B4 FE               [ 2]  629 	ldw	x, (x)
      0002B5 1F 19            [ 2]  630 	ldw	(0x19, sp), x
                                    631 ;	./src/OSAL_Timers.c: 431: timerHead = srchTimer->next;
      0002B7 1E 09            [ 2]  632 	ldw	x, (0x09, sp)
      0002B9 FE               [ 2]  633 	ldw	x, (x)
      0002BA 1F 17            [ 2]  634 	ldw	(0x17, sp), x
      0002BC 90 93            [ 1]  635 	ldw	y, x
                                    636 ;	./src/OSAL_Timers.c: 425: if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
      0002BE 1E 19            [ 2]  637 	ldw	x, (0x19, sp)
      0002C0 26 05            [ 1]  638 	jrne	00140$
      0002C2 1E 13            [ 2]  639 	ldw	x, (0x13, sp)
      0002C4 FE               [ 2]  640 	ldw	x, (x)
      0002C5 27 05            [ 1]  641 	jreq	00136$
      0002C7                        642 00140$:
                                    643 ;	./src/OSAL_Timers.c: 426: (srchTimer->event_flag == 0) )
      0002C7 1E 11            [ 2]  644 	ldw	x, (0x11, sp)
      0002C9 FE               [ 2]  645 	ldw	x, (x)
      0002CA 26 1A            [ 1]  646 	jrne	00137$
      0002CC                        647 00136$:
                                    648 ;	./src/OSAL_Timers.c: 429: if ( prevTimer == NULL )
      0002CC 1E 0B            [ 2]  649 	ldw	x, (0x0b, sp)
      0002CE 26 06            [ 1]  650 	jrne	00134$
                                    651 ;	./src/OSAL_Timers.c: 431: timerHead = srchTimer->next;
      0002D0 90 CFu00u00      [ 2]  652 	ldw	_timerHead+0, y
      0002D4 20 05            [ 2]  653 	jra	00135$
      0002D6                        654 00134$:
                                    655 ;	./src/OSAL_Timers.c: 435: prevTimer->next = srchTimer->next;
      0002D6 1E 0B            [ 2]  656 	ldw	x, (0x0b, sp)
      0002D8 16 17            [ 2]  657 	ldw	y, (0x17, sp)
      0002DA FF               [ 2]  658 	ldw	(x), y
      0002DB                        659 00135$:
                                    660 ;	./src/OSAL_Timers.c: 439: freeTimer = srchTimer;
      0002DB 16 09            [ 2]  661 	ldw	y, (0x09, sp)
      0002DD 17 0D            [ 2]  662 	ldw	(0x0d, sp), y
                                    663 ;	./src/OSAL_Timers.c: 442: srchTimer = srchTimer->next;
      0002DF 1E 09            [ 2]  664 	ldw	x, (0x09, sp)
      0002E1 FE               [ 2]  665 	ldw	x, (x)
      0002E2 1F 09            [ 2]  666 	ldw	(0x09, sp), x
      0002E4 20 06            [ 2]  667 	jra	00141$
      0002E6                        668 00137$:
                                    669 ;	./src/OSAL_Timers.c: 447: prevTimer = srchTimer;
      0002E6 1E 09            [ 2]  670 	ldw	x, (0x09, sp)
      0002E8 1F 0B            [ 2]  671 	ldw	(0x0b, sp), x
                                    672 ;	./src/OSAL_Timers.c: 448: srchTimer = srchTimer->next;
      0002EA 17 09            [ 2]  673 	ldw	(0x09, sp), y
                                    674 ;	./src/OSAL_Timers.c: 451: HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
      0002EC                        675 00141$:
                                    676 ;	./src/OSAL_Timers.c: 453: if ( freeTimer )
      0002EC 1E 0D            [ 2]  677 	ldw	x, (0x0d, sp)
      0002EE 26 03            [ 1]  678 	jrne	00256$
      0002F0 CCr01r80         [ 2]  679 	jp	00148$
      0002F3                        680 00256$:
                                    681 ;	./src/OSAL_Timers.c: 455: if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
      0002F3 1E 0D            [ 2]  682 	ldw	x, (0x0d, sp)
      0002F5 EE 02            [ 2]  683 	ldw	x, (0x2, x)
      0002F7 26 18            [ 1]  684 	jrne	00144$
      0002F9 1E 0D            [ 2]  685 	ldw	x, (0x0d, sp)
      0002FB 5C               [ 1]  686 	incw	x
      0002FC 5C               [ 1]  687 	incw	x
      0002FD EE 02            [ 2]  688 	ldw	x, (0x2, x)
      0002FF 26 10            [ 1]  689 	jrne	00144$
                                    690 ;	./src/OSAL_Timers.c: 457: osal_set_event( freeTimer->task_id, freeTimer->event_flag );
      000301 1E 0D            [ 2]  691 	ldw	x, (0x0d, sp)
      000303 EE 06            [ 2]  692 	ldw	x, (0x6, x)
      000305 16 0D            [ 2]  693 	ldw	y, (0x0d, sp)
      000307 90 E6 08         [ 1]  694 	ld	a, (0x8, y)
      00030A 89               [ 2]  695 	pushw	x
      00030B 88               [ 1]  696 	push	a
      00030C CDr00r00         [ 4]  697 	call	_osal_set_event
      00030F 5B 03            [ 2]  698 	addw	sp, #3
      000311                        699 00144$:
                                    700 ;	./src/OSAL_Timers.c: 459: osal_mem_free( freeTimer );
      000311 1E 0D            [ 2]  701 	ldw	x, (0x0d, sp)
      000313 89               [ 2]  702 	pushw	x
      000314 CDr00r00         [ 4]  703 	call	_osal_mem_free
      000317 85               [ 2]  704 	popw	x
      000318 CCr01r80         [ 2]  705 	jp	00148$
      00031B                        706 00153$:
                                    707 ;	./src/OSAL_Timers.c: 463: }
      00031B 5B 1A            [ 2]  708 	addw	sp, #26
      00031D 81               [ 4]  709 	ret
                                    710 ;	./src/OSAL_Timers.c: 544: uint32 osal_GetSystemClock( void )
                                    711 ;	-----------------------------------------
                                    712 ;	 function osal_GetSystemClock
                                    713 ;	-----------------------------------------
      00031E                        714 _osal_GetSystemClock:
                                    715 ;	./src/OSAL_Timers.c: 546: return ( osal_systemClock );
      00031E CEu00u04         [ 2]  716 	ldw	x, _osal_systemClock+2
      000321 90 CEu00u02      [ 2]  717 	ldw	y, _osal_systemClock+0
                                    718 ;	./src/OSAL_Timers.c: 547: }
      000325 81               [ 4]  719 	ret
                                    720 	.area CODE
                                    721 	.area CONST
                                    722 	.area INITIALIZER
                                    723 	.area CABS (ABS)
