                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module OSAL
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _osalInitTasks
                                     12 	.globl _osalTimerInit
                                     13 	.globl _osal_mem_free
                                     14 	.globl _osal_mem_alloc
                                     15 	.globl _osal_mem_kick
                                     16 	.globl _osal_mem_init
                                     17 	.globl _memset
                                     18 	.globl _osal_qHead
                                     19 	.globl _osal_memcpy
                                     20 	.globl _osal_revmemcpy
                                     21 	.globl _osal_memdup
                                     22 	.globl _osal_memcmp
                                     23 	.globl _osal_memset
                                     24 	.globl _osal_msg_allocate
                                     25 	.globl _osal_msg_deallocate
                                     26 	.globl _osal_msg_send
                                     27 	.globl _osal_msg_push_front
                                     28 	.globl _osal_msg_receive
                                     29 	.globl _osal_msg_find
                                     30 	.globl _osal_msg_enqueue
                                     31 	.globl _osal_msg_dequeue
                                     32 	.globl _osal_msg_push
                                     33 	.globl _osal_msg_extract
                                     34 	.globl _osal_msg_enqueue_max
                                     35 	.globl _osal_set_event
                                     36 	.globl _osal_clear_event
                                     37 	.globl _osal_isr_register
                                     38 	.globl _osal_int_enable
                                     39 	.globl _osal_int_disable
                                     40 	.globl _osal_init_system
                                     41 	.globl _osal_start_system
                                     42 	.globl _osal_run_system
                                     43 	.globl _osal_self
                                     44 ;--------------------------------------------------------
                                     45 ; ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DATA
      000000                         48 _osal_qHead::
      000000                         49 	.ds 2
                                     50 ;--------------------------------------------------------
                                     51 ; ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area INITIALIZED
      000000                         54 _activeTaskID:
      000000                         55 	.ds 1
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area DABS (ABS)
                                     60 
                                     61 ; default segment ordering for linker
                                     62 	.area HOME
                                     63 	.area GSINIT
                                     64 	.area GSFINAL
                                     65 	.area CONST
                                     66 	.area INITIALIZER
                                     67 	.area CODE
                                     68 
                                     69 ;--------------------------------------------------------
                                     70 ; global & static initialisations
                                     71 ;--------------------------------------------------------
                                     72 	.area HOME
                                     73 	.area GSINIT
                                     74 	.area GSFINAL
                                     75 	.area GSINIT
                                     76 ;--------------------------------------------------------
                                     77 ; Home
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME
                                     80 	.area HOME
                                     81 ;--------------------------------------------------------
                                     82 ; code
                                     83 ;--------------------------------------------------------
                                     84 	.area CODE
                                     85 ;	./src/OSAL.c: 49: void *osal_memcpy( void *dst, const void *src, unsigned int len )
                                     86 ;	-----------------------------------------
                                     87 ;	 function osal_memcpy
                                     88 ;	-----------------------------------------
      000000                         89 _osal_memcpy:
      000000 52 06            [ 2]   90 	sub	sp, #6
                                     91 ;	./src/OSAL.c: 54: pSrc = src;
      000002 16 0B            [ 2]   92 	ldw	y, (0x0b, sp)
                                     93 ;	./src/OSAL.c: 55: pDst = dst;
      000004 1E 09            [ 2]   94 	ldw	x, (0x09, sp)
                                     95 ;	./src/OSAL.c: 57: while ( len-- )
      000006 17 03            [ 2]   96 	ldw	(0x03, sp), y
      000008 16 0D            [ 2]   97 	ldw	y, (0x0d, sp)
      00000A 17 05            [ 2]   98 	ldw	(0x05, sp), y
      00000C                         99 00101$:
      00000C 16 05            [ 2]  100 	ldw	y, (0x05, sp)
      00000E 17 01            [ 2]  101 	ldw	(0x01, sp), y
      000010 16 05            [ 2]  102 	ldw	y, (0x05, sp)
      000012 90 5A            [ 2]  103 	decw	y
      000014 17 05            [ 2]  104 	ldw	(0x05, sp), y
      000016 16 01            [ 2]  105 	ldw	y, (0x01, sp)
      000018 27 0E            [ 1]  106 	jreq	00108$
                                    107 ;	./src/OSAL.c: 58: *pDst++ = *pSrc++;
      00001A 16 03            [ 2]  108 	ldw	y, (0x03, sp)
      00001C 90 F6            [ 1]  109 	ld	a, (y)
      00001E 16 03            [ 2]  110 	ldw	y, (0x03, sp)
      000020 90 5C            [ 1]  111 	incw	y
      000022 17 03            [ 2]  112 	ldw	(0x03, sp), y
      000024 F7               [ 1]  113 	ld	(x), a
      000025 5C               [ 1]  114 	incw	x
      000026 20 E4            [ 2]  115 	jra	00101$
      000028                        116 00108$:
                                    117 ;	./src/OSAL.c: 60: return ( pDst );
                                    118 ;	./src/OSAL.c: 61: }
      000028 5B 06            [ 2]  119 	addw	sp, #6
      00002A 81               [ 4]  120 	ret
                                    121 ;	./src/OSAL.c: 80: void *osal_revmemcpy( void *dst, const void *src, unsigned int len )
                                    122 ;	-----------------------------------------
                                    123 ;	 function osal_revmemcpy
                                    124 ;	-----------------------------------------
      00002B                        125 _osal_revmemcpy:
      00002B 52 06            [ 2]  126 	sub	sp, #6
                                    127 ;	./src/OSAL.c: 85: pSrc = src;
      00002D 16 0B            [ 2]  128 	ldw	y, (0x0b, sp)
                                    129 ;	./src/OSAL.c: 86: pSrc += (len-1);
      00002F 1E 0D            [ 2]  130 	ldw	x, (0x0d, sp)
      000031 5A               [ 2]  131 	decw	x
      000032 1F 05            [ 2]  132 	ldw	(0x05, sp), x
      000034 72 F9 05         [ 2]  133 	addw	y, (0x05, sp)
                                    134 ;	./src/OSAL.c: 87: pDst = dst;
      000037 1E 09            [ 2]  135 	ldw	x, (0x09, sp)
                                    136 ;	./src/OSAL.c: 89: while ( len-- )
      000039 17 03            [ 2]  137 	ldw	(0x03, sp), y
      00003B 16 0D            [ 2]  138 	ldw	y, (0x0d, sp)
      00003D 17 05            [ 2]  139 	ldw	(0x05, sp), y
      00003F                        140 00101$:
      00003F 16 05            [ 2]  141 	ldw	y, (0x05, sp)
      000041 17 01            [ 2]  142 	ldw	(0x01, sp), y
      000043 16 05            [ 2]  143 	ldw	y, (0x05, sp)
      000045 90 5A            [ 2]  144 	decw	y
      000047 17 05            [ 2]  145 	ldw	(0x05, sp), y
      000049 16 01            [ 2]  146 	ldw	y, (0x01, sp)
      00004B 27 0E            [ 1]  147 	jreq	00108$
                                    148 ;	./src/OSAL.c: 90: *pDst++ = *pSrc--;
      00004D 16 03            [ 2]  149 	ldw	y, (0x03, sp)
      00004F 90 F6            [ 1]  150 	ld	a, (y)
      000051 16 03            [ 2]  151 	ldw	y, (0x03, sp)
      000053 90 5A            [ 2]  152 	decw	y
      000055 17 03            [ 2]  153 	ldw	(0x03, sp), y
      000057 F7               [ 1]  154 	ld	(x), a
      000058 5C               [ 1]  155 	incw	x
      000059 20 E4            [ 2]  156 	jra	00101$
      00005B                        157 00108$:
                                    158 ;	./src/OSAL.c: 92: return ( pDst );
                                    159 ;	./src/OSAL.c: 93: }
      00005B 5B 06            [ 2]  160 	addw	sp, #6
      00005D 81               [ 4]  161 	ret
                                    162 ;	./src/OSAL.c: 107: void *osal_memdup( const void *src, unsigned int len )
                                    163 ;	-----------------------------------------
                                    164 ;	 function osal_memdup
                                    165 ;	-----------------------------------------
      00005E                        166 _osal_memdup:
      00005E 89               [ 2]  167 	pushw	x
                                    168 ;	./src/OSAL.c: 111: pDst = osal_mem_alloc( len );
      00005F 1E 07            [ 2]  169 	ldw	x, (0x07, sp)
      000061 89               [ 2]  170 	pushw	x
      000062 CDr00r00         [ 4]  171 	call	_osal_mem_alloc
      000065 5B 02            [ 2]  172 	addw	sp, #2
                                    173 ;	./src/OSAL.c: 114: VOID osal_memcpy( pDst, src, len );
      000067 1F 01            [ 2]  174 	ldw	(0x01, sp), x
                                    175 ;	./src/OSAL.c: 112: if ( pDst )
      000069 5D               [ 2]  176 	tnzw	x
      00006A 27 0E            [ 1]  177 	jreq	00102$
                                    178 ;	./src/OSAL.c: 114: VOID osal_memcpy( pDst, src, len );
      00006C 1E 07            [ 2]  179 	ldw	x, (0x07, sp)
      00006E 89               [ 2]  180 	pushw	x
      00006F 1E 07            [ 2]  181 	ldw	x, (0x07, sp)
      000071 89               [ 2]  182 	pushw	x
      000072 1E 05            [ 2]  183 	ldw	x, (0x05, sp)
      000074 89               [ 2]  184 	pushw	x
      000075 CDr00r00         [ 4]  185 	call	_osal_memcpy
      000078 5B 06            [ 2]  186 	addw	sp, #6
      00007A                        187 00102$:
                                    188 ;	./src/OSAL.c: 117: return ( (void *)pDst );
      00007A 1E 01            [ 2]  189 	ldw	x, (0x01, sp)
                                    190 ;	./src/OSAL.c: 118: }
      00007C 5B 02            [ 2]  191 	addw	sp, #2
      00007E 81               [ 4]  192 	ret
                                    193 ;	./src/OSAL.c: 133: uint8 osal_memcmp( const void *src1, const void *src2, unsigned int len )
                                    194 ;	-----------------------------------------
                                    195 ;	 function osal_memcmp
                                    196 ;	-----------------------------------------
      00007F                        197 _osal_memcmp:
      00007F 52 06            [ 2]  198 	sub	sp, #6
                                    199 ;	./src/OSAL.c: 138: pSrc1 = src1;
      000081 16 09            [ 2]  200 	ldw	y, (0x09, sp)
                                    201 ;	./src/OSAL.c: 139: pSrc2 = src2;
      000083 1E 0B            [ 2]  202 	ldw	x, (0x0b, sp)
                                    203 ;	./src/OSAL.c: 141: while ( len-- )
      000085 17 03            [ 2]  204 	ldw	(0x03, sp), y
      000087 1F 05            [ 2]  205 	ldw	(0x05, sp), x
      000089 16 0D            [ 2]  206 	ldw	y, (0x0d, sp)
      00008B                        207 00103$:
      00008B 17 01            [ 2]  208 	ldw	(0x01, sp), y
      00008D 90 5A            [ 2]  209 	decw	y
      00008F 1E 01            [ 2]  210 	ldw	x, (0x01, sp)
      000091 27 18            [ 1]  211 	jreq	00105$
                                    212 ;	./src/OSAL.c: 143: if( *pSrc1++ != *pSrc2++ )
      000093 1E 03            [ 2]  213 	ldw	x, (0x03, sp)
      000095 F6               [ 1]  214 	ld	a, (x)
      000096 6B 02            [ 1]  215 	ld	(0x02, sp), a
      000098 1E 03            [ 2]  216 	ldw	x, (0x03, sp)
      00009A 5C               [ 1]  217 	incw	x
      00009B 1F 03            [ 2]  218 	ldw	(0x03, sp), x
      00009D 1E 05            [ 2]  219 	ldw	x, (0x05, sp)
      00009F F6               [ 1]  220 	ld	a, (x)
      0000A0 1E 05            [ 2]  221 	ldw	x, (0x05, sp)
      0000A2 5C               [ 1]  222 	incw	x
      0000A3 1F 05            [ 2]  223 	ldw	(0x05, sp), x
      0000A5 11 02            [ 1]  224 	cp	a, (0x02, sp)
      0000A7 27 E2            [ 1]  225 	jreq	00103$
                                    226 ;	./src/OSAL.c: 144: return FALSE;
      0000A9 4F               [ 1]  227 	clr	a
                                    228 ;	./src/OSAL.c: 146: return TRUE;
      0000AA C5                     229 	.byte 0xc5
      0000AB                        230 00105$:
      0000AB A6 01            [ 1]  231 	ld	a, #0x01
      0000AD                        232 00106$:
                                    233 ;	./src/OSAL.c: 147: }
      0000AD 5B 06            [ 2]  234 	addw	sp, #6
      0000AF 81               [ 4]  235 	ret
                                    236 ;	./src/OSAL.c: 163: void *osal_memset( void *dest, uint8 value, int len )
                                    237 ;	-----------------------------------------
                                    238 ;	 function osal_memset
                                    239 ;	-----------------------------------------
      0000B0                        240 _osal_memset:
                                    241 ;	./src/OSAL.c: 165: return memset( dest, value, len );
      0000B0 5F               [ 1]  242 	clrw	x
      0000B1 7B 05            [ 1]  243 	ld	a, (0x05, sp)
      0000B3 97               [ 1]  244 	ld	xl, a
      0000B4 16 06            [ 2]  245 	ldw	y, (0x06, sp)
      0000B6 90 89            [ 2]  246 	pushw	y
      0000B8 89               [ 2]  247 	pushw	x
      0000B9 1E 07            [ 2]  248 	ldw	x, (0x07, sp)
      0000BB 89               [ 2]  249 	pushw	x
      0000BC CDr00r00         [ 4]  250 	call	_memset
      0000BF 5B 06            [ 2]  251 	addw	sp, #6
                                    252 ;	./src/OSAL.c: 166: }
      0000C1 81               [ 4]  253 	ret
                                    254 ;	./src/OSAL.c: 194: uint8 * osal_msg_allocate( uint16 len )
                                    255 ;	-----------------------------------------
                                    256 ;	 function osal_msg_allocate
                                    257 ;	-----------------------------------------
      0000C2                        258 _osal_msg_allocate:
                                    259 ;	./src/OSAL.c: 198: if ( len == 0 )
                                    260 ;	./src/OSAL.c: 199: return ( NULL );
      0000C2 1E 03            [ 2]  261 	ldw	x, (0x03, sp)
      0000C4 26 01            [ 1]  262 	jrne	00102$
      0000C6 81               [ 4]  263 	ret
      0000C7                        264 00102$:
                                    265 ;	./src/OSAL.c: 201: hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
      0000C7 1E 03            [ 2]  266 	ldw	x, (0x03, sp)
      0000C9 1C 00 05         [ 2]  267 	addw	x, #0x0005
      0000CC 89               [ 2]  268 	pushw	x
      0000CD CDr00r00         [ 4]  269 	call	_osal_mem_alloc
      0000D0 5B 02            [ 2]  270 	addw	sp, #2
      0000D2 51               [ 1]  271 	exgw	x, y
                                    272 ;	./src/OSAL.c: 202: if ( hdr )
      0000D3 90 5D            [ 2]  273 	tnzw	y
      0000D5 27 18            [ 1]  274 	jreq	00104$
                                    275 ;	./src/OSAL.c: 204: hdr->next = NULL;
      0000D7 93               [ 1]  276 	ldw	x, y
      0000D8 6F 01            [ 1]  277 	clr	(0x1, x)
      0000DA 7F               [ 1]  278 	clr	(x)
                                    279 ;	./src/OSAL.c: 205: hdr->len = len;
      0000DB 93               [ 1]  280 	ldw	x, y
      0000DC 5C               [ 1]  281 	incw	x
      0000DD 5C               [ 1]  282 	incw	x
      0000DE 7B 04            [ 1]  283 	ld	a, (0x04, sp)
      0000E0 E7 01            [ 1]  284 	ld	(0x1, x), a
      0000E2 7B 03            [ 1]  285 	ld	a, (0x03, sp)
      0000E4 F7               [ 1]  286 	ld	(x), a
                                    287 ;	./src/OSAL.c: 206: hdr->dest_id = TASK_NO_TASK;
      0000E5 A6 FF            [ 1]  288 	ld	a, #0xff
      0000E7 90 E7 04         [ 1]  289 	ld	(0x0004, y), a
                                    290 ;	./src/OSAL.c: 207: return ( (uint8 *) (hdr + 1) );
      0000EA 93               [ 1]  291 	ldw	x, y
      0000EB 1C 00 05         [ 2]  292 	addw	x, #0x0005
      0000EE 81               [ 4]  293 	ret
      0000EF                        294 00104$:
                                    295 ;	./src/OSAL.c: 210: return ( NULL );
      0000EF 5F               [ 1]  296 	clrw	x
                                    297 ;	./src/OSAL.c: 211: }
      0000F0 81               [ 4]  298 	ret
                                    299 ;	./src/OSAL.c: 227: uint8 osal_msg_deallocate( uint8 *msg_ptr )
                                    300 ;	-----------------------------------------
                                    301 ;	 function osal_msg_deallocate
                                    302 ;	-----------------------------------------
      0000F1                        303 _osal_msg_deallocate:
                                    304 ;	./src/OSAL.c: 231: if ( msg_ptr == NULL )
      0000F1 1E 03            [ 2]  305 	ldw	x, (0x03, sp)
      0000F3 26 03            [ 1]  306 	jrne	00102$
                                    307 ;	./src/OSAL.c: 232: return ( INVALID_MSG_POINTER );
      0000F5 A6 05            [ 1]  308 	ld	a, #0x05
      0000F7 81               [ 4]  309 	ret
      0000F8                        310 00102$:
                                    311 ;	./src/OSAL.c: 235: if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
      0000F8 1E 03            [ 2]  312 	ldw	x, (0x03, sp)
      0000FA 1C FF FF         [ 2]  313 	addw	x, #0xffff
      0000FD F6               [ 1]  314 	ld	a, (x)
      0000FE 4C               [ 1]  315 	inc	a
      0000FF 27 03            [ 1]  316 	jreq	00104$
                                    317 ;	./src/OSAL.c: 236: return ( MSG_BUFFER_NOT_AVAIL );
      000101 A6 04            [ 1]  318 	ld	a, #0x04
      000103 81               [ 4]  319 	ret
      000104                        320 00104$:
                                    321 ;	./src/OSAL.c: 238: x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
      000104 1E 03            [ 2]  322 	ldw	x, (0x03, sp)
      000106 1D 00 05         [ 2]  323 	subw	x, #0x0005
                                    324 ;	./src/OSAL.c: 240: osal_mem_free( (void *)x );
      000109 89               [ 2]  325 	pushw	x
      00010A CDr00r00         [ 4]  326 	call	_osal_mem_free
      00010D 85               [ 2]  327 	popw	x
                                    328 ;	./src/OSAL.c: 242: return ( SUCCESS );
      00010E 4F               [ 1]  329 	clr	a
                                    330 ;	./src/OSAL.c: 243: }
      00010F 81               [ 4]  331 	ret
                                    332 ;	./src/OSAL.c: 262: uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
                                    333 ;	-----------------------------------------
                                    334 ;	 function osal_msg_send
                                    335 ;	-----------------------------------------
      000110                        336 _osal_msg_send:
                                    337 ;	./src/OSAL.c: 264: return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
      000110 4B 00            [ 1]  338 	push	#0x00
      000112 1E 05            [ 2]  339 	ldw	x, (0x05, sp)
      000114 89               [ 2]  340 	pushw	x
      000115 7B 06            [ 1]  341 	ld	a, (0x06, sp)
      000117 88               [ 1]  342 	push	a
      000118 CDr01r2C         [ 4]  343 	call	_osal_msg_enqueue_push
      00011B 5B 04            [ 2]  344 	addw	sp, #4
                                    345 ;	./src/OSAL.c: 265: }
      00011D 81               [ 4]  346 	ret
                                    347 ;	./src/OSAL.c: 283: uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
                                    348 ;	-----------------------------------------
                                    349 ;	 function osal_msg_push_front
                                    350 ;	-----------------------------------------
      00011E                        351 _osal_msg_push_front:
                                    352 ;	./src/OSAL.c: 285: return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
      00011E 4B 01            [ 1]  353 	push	#0x01
      000120 1E 05            [ 2]  354 	ldw	x, (0x05, sp)
      000122 89               [ 2]  355 	pushw	x
      000123 7B 06            [ 1]  356 	ld	a, (0x06, sp)
      000125 88               [ 1]  357 	push	a
      000126 CDr01r2C         [ 4]  358 	call	_osal_msg_enqueue_push
      000129 5B 04            [ 2]  359 	addw	sp, #4
                                    360 ;	./src/OSAL.c: 286: }
      00012B 81               [ 4]  361 	ret
                                    362 ;	./src/OSAL.c: 306: static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
                                    363 ;	-----------------------------------------
                                    364 ;	 function osal_msg_enqueue_push
                                    365 ;	-----------------------------------------
      00012C                        366 _osal_msg_enqueue_push:
                                    367 ;	./src/OSAL.c: 308: if ( msg_ptr == NULL )
      00012C 1E 04            [ 2]  368 	ldw	x, (0x04, sp)
      00012E 26 03            [ 1]  369 	jrne	00102$
                                    370 ;	./src/OSAL.c: 310: return ( INVALID_MSG_POINTER );
      000130 A6 05            [ 1]  371 	ld	a, #0x05
      000132 81               [ 4]  372 	ret
      000133                        373 00102$:
                                    374 ;	./src/OSAL.c: 313: if ( destination_task >= tasksCnt )
      000133 C6u00u00         [ 1]  375 	ld	a, _tasksCnt+0
      000136 11 03            [ 1]  376 	cp	a, (0x03, sp)
      000138 22 0A            [ 1]  377 	jrugt	00104$
                                    378 ;	./src/OSAL.c: 315: osal_msg_deallocate( msg_ptr );
      00013A 1E 04            [ 2]  379 	ldw	x, (0x04, sp)
      00013C 89               [ 2]  380 	pushw	x
      00013D CDr00rF1         [ 4]  381 	call	_osal_msg_deallocate
      000140 85               [ 2]  382 	popw	x
                                    383 ;	./src/OSAL.c: 316: return ( INVALID_TASK );
      000141 A6 03            [ 1]  384 	ld	a, #0x03
      000143 81               [ 4]  385 	ret
      000144                        386 00104$:
                                    387 ;	./src/OSAL.c: 320: if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
      000144 16 04            [ 2]  388 	ldw	y, (0x04, sp)
      000146 93               [ 1]  389 	ldw	x, y
      000147 1C FF FB         [ 2]  390 	addw	x, #0xfffb
      00014A FE               [ 2]  391 	ldw	x, (x)
      00014B 26 06            [ 1]  392 	jrne	00105$
                                    393 ;	./src/OSAL.c: 321: OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
      00014D 93               [ 1]  394 	ldw	x, y
      00014E 5A               [ 2]  395 	decw	x
      00014F F6               [ 1]  396 	ld	a, (x)
      000150 4C               [ 1]  397 	inc	a
      000151 27 0A            [ 1]  398 	jreq	00106$
      000153                        399 00105$:
                                    400 ;	./src/OSAL.c: 323: osal_msg_deallocate( msg_ptr );
      000153 1E 04            [ 2]  401 	ldw	x, (0x04, sp)
      000155 89               [ 2]  402 	pushw	x
      000156 CDr00rF1         [ 4]  403 	call	_osal_msg_deallocate
      000159 85               [ 2]  404 	popw	x
                                    405 ;	./src/OSAL.c: 324: return ( INVALID_MSG_POINTER );
      00015A A6 05            [ 1]  406 	ld	a, #0x05
      00015C 81               [ 4]  407 	ret
      00015D                        408 00106$:
                                    409 ;	./src/OSAL.c: 327: OSAL_MSG_ID( msg_ptr ) = destination_task;
      00015D 7B 03            [ 1]  410 	ld	a, (0x03, sp)
      00015F F7               [ 1]  411 	ld	(x), a
                                    412 ;	./src/OSAL.c: 332: osal_msg_push( &osal_qHead, msg_ptr );
      000160 1E 04            [ 2]  413 	ldw	x, (0x04, sp)
                                    414 ;	./src/OSAL.c: 329: if ( push == TRUE )
      000162 7B 06            [ 1]  415 	ld	a, (0x06, sp)
      000164 4A               [ 1]  416 	dec	a
      000165 26 0C            [ 1]  417 	jrne	00109$
                                    418 ;	./src/OSAL.c: 332: osal_msg_push( &osal_qHead, msg_ptr );
      000167 89               [ 2]  419 	pushw	x
      000168 4Br00            [ 1]  420 	push	#<(_osal_qHead + 0)
      00016A 4Bs00            [ 1]  421 	push	#((_osal_qHead + 0) >> 8)
      00016C CDr02r77         [ 4]  422 	call	_osal_msg_push
      00016F 5B 04            [ 2]  423 	addw	sp, #4
      000171 20 0A            [ 2]  424 	jra	00110$
      000173                        425 00109$:
                                    426 ;	./src/OSAL.c: 337: osal_msg_enqueue( &osal_qHead, msg_ptr );
      000173 89               [ 2]  427 	pushw	x
      000174 4Br00            [ 1]  428 	push	#<(_osal_qHead + 0)
      000176 4Bs00            [ 1]  429 	push	#((_osal_qHead + 0) >> 8)
      000178 CDr02r1B         [ 4]  430 	call	_osal_msg_enqueue
      00017B 5B 04            [ 2]  431 	addw	sp, #4
      00017D                        432 00110$:
                                    433 ;	./src/OSAL.c: 341: osal_set_event( destination_task, SYS_EVENT_MSG );
      00017D 4B 00            [ 1]  434 	push	#0x00
      00017F 4B 80            [ 1]  435 	push	#0x80
      000181 7B 05            [ 1]  436 	ld	a, (0x05, sp)
      000183 88               [ 1]  437 	push	a
      000184 CDr03r0C         [ 4]  438 	call	_osal_set_event
      000187 5B 03            [ 2]  439 	addw	sp, #3
                                    440 ;	./src/OSAL.c: 343: return ( SUCCESS );
      000189 4F               [ 1]  441 	clr	a
                                    442 ;	./src/OSAL.c: 344: }
      00018A 81               [ 4]  443 	ret
                                    444 ;	./src/OSAL.c: 359: uint8 *osal_msg_receive( uint8 task_id )
                                    445 ;	-----------------------------------------
                                    446 ;	 function osal_msg_receive
                                    447 ;	-----------------------------------------
      00018B                        448 _osal_msg_receive:
      00018B 52 06            [ 2]  449 	sub	sp, #6
                                    450 ;	./src/OSAL.c: 362: osal_msg_hdr_t *prevHdr = NULL;
      00018D 5F               [ 1]  451 	clrw	x
      00018E 1F 01            [ 2]  452 	ldw	(0x01, sp), x
                                    453 ;	./src/OSAL.c: 363: osal_msg_hdr_t *foundHdr = NULL;
      000190 5F               [ 1]  454 	clrw	x
      000191 1F 03            [ 2]  455 	ldw	(0x03, sp), x
                                    456 ;	./src/OSAL.c: 367: HAL_ENTER_CRITICAL_SECTION(intState);
      000193 9B               [ 1]  457 	sim
      000194 9D               [ 1]  458 	nop
      000195 9D               [ 1]  459 	nop
                                    460 ;	./src/OSAL.c: 370: listHdr = osal_qHead;
      000196 90 CEu00u00      [ 2]  461 	ldw	y, _osal_qHead+0
                                    462 ;	./src/OSAL.c: 373: while ( listHdr != NULL )
      00019A                        463 00114$:
      00019A 90 5D            [ 2]  464 	tnzw	y
      00019C 27 1E            [ 1]  465 	jreq	00116$
                                    466 ;	./src/OSAL.c: 375: if ( (listHdr - 1)->dest_id == task_id )
      00019E 93               [ 1]  467 	ldw	x, y
      00019F 1D 00 05         [ 2]  468 	subw	x, #0x0005
      0001A2 1F 05            [ 2]  469 	ldw	(0x05, sp), x
      0001A4 E6 04            [ 1]  470 	ld	a, (0x4, x)
      0001A6 11 09            [ 1]  471 	cp	a, (0x09, sp)
      0001A8 26 06            [ 1]  472 	jrne	00111$
                                    473 ;	./src/OSAL.c: 377: if ( foundHdr == NULL )
      0001AA 1E 03            [ 2]  474 	ldw	x, (0x03, sp)
      0001AC 26 0E            [ 1]  475 	jrne	00116$
                                    476 ;	./src/OSAL.c: 380: foundHdr = listHdr;
      0001AE 17 03            [ 2]  477 	ldw	(0x03, sp), y
                                    478 ;	./src/OSAL.c: 385: break;
      0001B0                        479 00111$:
                                    480 ;	./src/OSAL.c: 388: if ( foundHdr == NULL )
      0001B0 1E 03            [ 2]  481 	ldw	x, (0x03, sp)
      0001B2 26 02            [ 1]  482 	jrne	00113$
                                    483 ;	./src/OSAL.c: 390: prevHdr = listHdr;
      0001B4 17 01            [ 2]  484 	ldw	(0x01, sp), y
      0001B6                        485 00113$:
                                    486 ;	./src/OSAL.c: 392: listHdr = OSAL_MSG_NEXT( listHdr );
      0001B6 1E 05            [ 2]  487 	ldw	x, (0x05, sp)
      0001B8 FE               [ 2]  488 	ldw	x, (x)
      0001B9 51               [ 1]  489 	exgw	x, y
      0001BA 20 DE            [ 2]  490 	jra	00114$
      0001BC                        491 00116$:
                                    492 ;	./src/OSAL.c: 396: if ( listHdr != NULL )
      0001BC 90 5D            [ 2]  493 	tnzw	y
      0001BE 27 0E            [ 1]  494 	jreq	00118$
                                    495 ;	./src/OSAL.c: 399: osal_set_event( task_id, SYS_EVENT_MSG );
      0001C0 4B 00            [ 1]  496 	push	#0x00
      0001C2 4B 80            [ 1]  497 	push	#0x80
      0001C4 7B 0B            [ 1]  498 	ld	a, (0x0b, sp)
      0001C6 88               [ 1]  499 	push	a
      0001C7 CDr03r0C         [ 4]  500 	call	_osal_set_event
      0001CA 5B 03            [ 2]  501 	addw	sp, #3
      0001CC 20 0C            [ 2]  502 	jra	00119$
      0001CE                        503 00118$:
                                    504 ;	./src/OSAL.c: 404: osal_clear_event( task_id, SYS_EVENT_MSG );
      0001CE 4B 00            [ 1]  505 	push	#0x00
      0001D0 4B 80            [ 1]  506 	push	#0x80
      0001D2 7B 0B            [ 1]  507 	ld	a, (0x0b, sp)
      0001D4 88               [ 1]  508 	push	a
      0001D5 CDr03r30         [ 4]  509 	call	_osal_clear_event
      0001D8 5B 03            [ 2]  510 	addw	sp, #3
      0001DA                        511 00119$:
                                    512 ;	./src/OSAL.c: 408: if ( foundHdr != NULL )
      0001DA 1E 03            [ 2]  513 	ldw	x, (0x03, sp)
      0001DC 27 10            [ 1]  514 	jreq	00122$
                                    515 ;	./src/OSAL.c: 411: osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
      0001DE 1E 01            [ 2]  516 	ldw	x, (0x01, sp)
      0001E0 16 03            [ 2]  517 	ldw	y, (0x03, sp)
      0001E2 89               [ 2]  518 	pushw	x
      0001E3 90 89            [ 2]  519 	pushw	y
      0001E5 4Br00            [ 1]  520 	push	#<(_osal_qHead + 0)
      0001E7 4Bs00            [ 1]  521 	push	#((_osal_qHead + 0) >> 8)
      0001E9 CDr02r8E         [ 4]  522 	call	_osal_msg_extract
      0001EC 5B 06            [ 2]  523 	addw	sp, #6
                                    524 ;	./src/OSAL.c: 415: HAL_EXIT_CRITICAL_SECTION(intState);
      0001EE                        525 00122$:
                                    526 ;	./src/OSAL.c: 417: return ( (uint8*) foundHdr );
      0001EE 1E 03            [ 2]  527 	ldw	x, (0x03, sp)
                                    528 ;	./src/OSAL.c: 418: }
      0001F0 5B 06            [ 2]  529 	addw	sp, #6
      0001F2 81               [ 4]  530 	ret
                                    531 ;	./src/OSAL.c: 438: osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
                                    532 ;	-----------------------------------------
                                    533 ;	 function osal_msg_find
                                    534 ;	-----------------------------------------
      0001F3                        535 _osal_msg_find:
      0001F3 89               [ 2]  536 	pushw	x
                                    537 ;	./src/OSAL.c: 443: HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
      0001F4 9B               [ 1]  538 	sim
      0001F5 9D               [ 1]  539 	nop
      0001F6 9D               [ 1]  540 	nop
                                    541 ;	./src/OSAL.c: 445: pHdr = osal_qHead;  // Point to the top of the queue.
      0001F7 CEu00u00         [ 2]  542 	ldw	x, _osal_qHead+0
                                    543 ;	./src/OSAL.c: 448: while (pHdr != NULL)
      0001FA                        544 00110$:
                                    545 ;	./src/OSAL.c: 450: if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
      0001FA 1F 01            [ 2]  546 	ldw	(0x01, sp), x
                                    547 ;	./src/OSAL.c: 448: while (pHdr != NULL)
      0001FC 5D               [ 2]  548 	tnzw	x
      0001FD 27 17            [ 1]  549 	jreq	00113$
                                    550 ;	./src/OSAL.c: 450: if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
      0001FF 1D 00 05         [ 2]  551 	subw	x, #0x0005
      000202 90 93            [ 1]  552 	ldw	y, x
      000204 90 E6 04         [ 1]  553 	ld	a, (0x4, y)
      000207 11 05            [ 1]  554 	cp	a, (0x05, sp)
      000209 26 08            [ 1]  555 	jrne	00108$
      00020B 16 01            [ 2]  556 	ldw	y, (0x01, sp)
      00020D 90 F6            [ 1]  557 	ld	a, (y)
      00020F 11 06            [ 1]  558 	cp	a, (0x06, sp)
      000211 27 03            [ 1]  559 	jreq	00113$
                                    560 ;	./src/OSAL.c: 452: break;
      000213                        561 00108$:
                                    562 ;	./src/OSAL.c: 455: pHdr = OSAL_MSG_NEXT(pHdr);
      000213 FE               [ 2]  563 	ldw	x, (x)
      000214 20 E4            [ 2]  564 	jra	00110$
                                    565 ;	./src/OSAL.c: 458: HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
      000216                        566 00113$:
                                    567 ;	./src/OSAL.c: 460: return (osal_event_hdr_t *)pHdr;
      000216 1E 01            [ 2]  568 	ldw	x, (0x01, sp)
                                    569 ;	./src/OSAL.c: 461: }
      000218 5B 02            [ 2]  570 	addw	sp, #2
      00021A 81               [ 4]  571 	ret
                                    572 ;	./src/OSAL.c: 475: void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
                                    573 ;	-----------------------------------------
                                    574 ;	 function osal_msg_enqueue
                                    575 ;	-----------------------------------------
      00021B                        576 _osal_msg_enqueue:
      00021B 52 04            [ 2]  577 	sub	sp, #4
                                    578 ;	./src/OSAL.c: 481: HAL_ENTER_CRITICAL_SECTION(intState);
      00021D 9B               [ 1]  579 	sim
      00021E 9D               [ 1]  580 	nop
      00021F 9D               [ 1]  581 	nop
                                    582 ;	./src/OSAL.c: 483: OSAL_MSG_NEXT( msg_ptr ) = NULL;
      000220 1E 09            [ 2]  583 	ldw	x, (0x09, sp)
      000222 1D 00 05         [ 2]  584 	subw	x, #0x0005
      000225 6F 01            [ 1]  585 	clr	(0x1, x)
      000227 7F               [ 1]  586 	clr	(x)
                                    587 ;	./src/OSAL.c: 485: if ( *q_ptr == NULL )
      000228 16 07            [ 2]  588 	ldw	y, (0x07, sp)
      00022A 17 03            [ 2]  589 	ldw	(0x03, sp), y
      00022C 93               [ 1]  590 	ldw	x, y
      00022D FE               [ 2]  591 	ldw	x, (x)
      00022E 26 07            [ 1]  592 	jrne	00109$
                                    593 ;	./src/OSAL.c: 487: *q_ptr = msg_ptr;
      000230 1E 03            [ 2]  594 	ldw	x, (0x03, sp)
      000232 16 09            [ 2]  595 	ldw	y, (0x09, sp)
      000234 FF               [ 2]  596 	ldw	(x), y
      000235 20 13            [ 2]  597 	jra	00116$
      000237                        598 00109$:
                                    599 ;	./src/OSAL.c: 492: for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
      000237 1F 03            [ 2]  600 	ldw	(0x03, sp), x
      000239                        601 00114$:
      000239 1E 03            [ 2]  602 	ldw	x, (0x03, sp)
      00023B 1D 00 05         [ 2]  603 	subw	x, #0x0005
      00023E 1F 01            [ 2]  604 	ldw	(0x01, sp), x
      000240 FE               [ 2]  605 	ldw	x, (x)
      000241 1F 03            [ 2]  606 	ldw	(0x03, sp), x
      000243 26 F4            [ 1]  607 	jrne	00114$
                                    608 ;	./src/OSAL.c: 495: OSAL_MSG_NEXT( list ) = msg_ptr;
      000245 1E 01            [ 2]  609 	ldw	x, (0x01, sp)
      000247 16 09            [ 2]  610 	ldw	y, (0x09, sp)
      000249 FF               [ 2]  611 	ldw	(x), y
                                    612 ;	./src/OSAL.c: 499: HAL_EXIT_CRITICAL_SECTION(intState);
      00024A                        613 00116$:
                                    614 ;	./src/OSAL.c: 500: }
      00024A 5B 04            [ 2]  615 	addw	sp, #4
      00024C 81               [ 4]  616 	ret
                                    617 ;	./src/OSAL.c: 513: void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
                                    618 ;	-----------------------------------------
                                    619 ;	 function osal_msg_dequeue
                                    620 ;	-----------------------------------------
      00024D                        621 _osal_msg_dequeue:
      00024D 52 06            [ 2]  622 	sub	sp, #6
                                    623 ;	./src/OSAL.c: 515: void *msg_ptr = NULL;
      00024F 5F               [ 1]  624 	clrw	x
      000250 1F 01            [ 2]  625 	ldw	(0x01, sp), x
                                    626 ;	./src/OSAL.c: 519: HAL_ENTER_CRITICAL_SECTION(intState);
      000252 9B               [ 1]  627 	sim
      000253 9D               [ 1]  628 	nop
      000254 9D               [ 1]  629 	nop
                                    630 ;	./src/OSAL.c: 521: if ( *q_ptr != NULL )
      000255 16 09            [ 2]  631 	ldw	y, (0x09, sp)
      000257 93               [ 1]  632 	ldw	x, y
      000258 FE               [ 2]  633 	ldw	x, (x)
      000259 27 17            [ 1]  634 	jreq	00109$
                                    635 ;	./src/OSAL.c: 524: msg_ptr = *q_ptr;
                                    636 ;	./src/OSAL.c: 525: *q_ptr = OSAL_MSG_NEXT( msg_ptr );
      00025B 1F 01            [ 2]  637 	ldw	(0x01, sp), x
      00025D 1F 03            [ 2]  638 	ldw	(0x03, sp), x
      00025F 1D 00 05         [ 2]  639 	subw	x, #0x0005
      000262 1F 05            [ 2]  640 	ldw	(0x05, sp), x
      000264 FE               [ 2]  641 	ldw	x, (x)
      000265 90 FF            [ 2]  642 	ldw	(y), x
                                    643 ;	./src/OSAL.c: 526: OSAL_MSG_NEXT( msg_ptr ) = NULL;
      000267 1E 05            [ 2]  644 	ldw	x, (0x05, sp)
      000269 6F 01            [ 1]  645 	clr	(0x1, x)
      00026B 7F               [ 1]  646 	clr	(x)
                                    647 ;	./src/OSAL.c: 527: OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
      00026C 1E 03            [ 2]  648 	ldw	x, (0x03, sp)
      00026E 5A               [ 2]  649 	decw	x
      00026F A6 FF            [ 1]  650 	ld	a, #0xff
      000271 F7               [ 1]  651 	ld	(x), a
                                    652 ;	./src/OSAL.c: 531: HAL_EXIT_CRITICAL_SECTION(intState);
      000272                        653 00109$:
                                    654 ;	./src/OSAL.c: 533: return msg_ptr;
      000272 1E 01            [ 2]  655 	ldw	x, (0x01, sp)
                                    656 ;	./src/OSAL.c: 534: }
      000274 5B 06            [ 2]  657 	addw	sp, #6
      000276 81               [ 4]  658 	ret
                                    659 ;	./src/OSAL.c: 549: void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
                                    660 ;	-----------------------------------------
                                    661 ;	 function osal_msg_push
                                    662 ;	-----------------------------------------
      000277                        663 _osal_msg_push:
      000277 89               [ 2]  664 	pushw	x
                                    665 ;	./src/OSAL.c: 554: HAL_ENTER_CRITICAL_SECTION(intState);
      000278 9B               [ 1]  666 	sim
      000279 9D               [ 1]  667 	nop
      00027A 9D               [ 1]  668 	nop
                                    669 ;	./src/OSAL.c: 557: OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
      00027B 1E 07            [ 2]  670 	ldw	x, (0x07, sp)
      00027D 1D 00 05         [ 2]  671 	subw	x, #0x0005
      000280 16 05            [ 2]  672 	ldw	y, (0x05, sp)
      000282 17 01            [ 2]  673 	ldw	(0x01, sp), y
      000284 90 FE            [ 2]  674 	ldw	y, (y)
      000286 FF               [ 2]  675 	ldw	(x), y
                                    676 ;	./src/OSAL.c: 558: *q_ptr = msg_ptr;
      000287 1E 01            [ 2]  677 	ldw	x, (0x01, sp)
      000289 16 07            [ 2]  678 	ldw	y, (0x07, sp)
      00028B FF               [ 2]  679 	ldw	(x), y
                                    680 ;	./src/OSAL.c: 561: HAL_EXIT_CRITICAL_SECTION(intState);
                                    681 ;	./src/OSAL.c: 562: }
      00028C 85               [ 2]  682 	popw	x
      00028D 81               [ 4]  683 	ret
                                    684 ;	./src/OSAL.c: 578: void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
                                    685 ;	-----------------------------------------
                                    686 ;	 function osal_msg_extract
                                    687 ;	-----------------------------------------
      00028E                        688 _osal_msg_extract:
      00028E 52 06            [ 2]  689 	sub	sp, #6
                                    690 ;	./src/OSAL.c: 583: HAL_ENTER_CRITICAL_SECTION(intState);
      000290 9B               [ 1]  691 	sim
      000291 9D               [ 1]  692 	nop
      000292 9D               [ 1]  693 	nop
                                    694 ;	./src/OSAL.c: 585: if ( msg_ptr == *q_ptr )
      000293 16 09            [ 2]  695 	ldw	y, (0x09, sp)
      000295 17 05            [ 2]  696 	ldw	(0x05, sp), y
      000297 93               [ 1]  697 	ldw	x, y
      000298 FE               [ 2]  698 	ldw	x, (x)
                                    699 ;	./src/OSAL.c: 588: *q_ptr = OSAL_MSG_NEXT( msg_ptr );
      000299 16 0B            [ 2]  700 	ldw	y, (0x0b, sp)
      00029B 17 01            [ 2]  701 	ldw	(0x01, sp), y
      00029D 72 A2 00 05      [ 2]  702 	subw	y, #0x0005
      0002A1 17 03            [ 2]  703 	ldw	(0x03, sp), y
      0002A3 90 FE            [ 2]  704 	ldw	y, (y)
                                    705 ;	./src/OSAL.c: 585: if ( msg_ptr == *q_ptr )
      0002A5 13 0B            [ 2]  706 	cpw	x, (0x0b, sp)
      0002A7 26 05            [ 1]  707 	jrne	00108$
                                    708 ;	./src/OSAL.c: 588: *q_ptr = OSAL_MSG_NEXT( msg_ptr );
      0002A9 1E 05            [ 2]  709 	ldw	x, (0x05, sp)
      0002AB FF               [ 2]  710 	ldw	(x), y
      0002AC 20 08            [ 2]  711 	jra	00109$
      0002AE                        712 00108$:
                                    713 ;	./src/OSAL.c: 593: OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
      0002AE 1E 0D            [ 2]  714 	ldw	x, (0x0d, sp)
      0002B0 1D 00 05         [ 2]  715 	subw	x, #0x0005
      0002B3 1F 05            [ 2]  716 	ldw	(0x05, sp), x
      0002B5 FF               [ 2]  717 	ldw	(x), y
      0002B6                        718 00109$:
                                    719 ;	./src/OSAL.c: 595: OSAL_MSG_NEXT( msg_ptr ) = NULL;
      0002B6 1E 03            [ 2]  720 	ldw	x, (0x03, sp)
      0002B8 6F 01            [ 1]  721 	clr	(0x1, x)
      0002BA 7F               [ 1]  722 	clr	(x)
                                    723 ;	./src/OSAL.c: 596: OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
      0002BB 1E 01            [ 2]  724 	ldw	x, (0x01, sp)
      0002BD 5A               [ 2]  725 	decw	x
      0002BE A6 FF            [ 1]  726 	ld	a, #0xff
      0002C0 F7               [ 1]  727 	ld	(x), a
                                    728 ;	./src/OSAL.c: 599: HAL_EXIT_CRITICAL_SECTION(intState);
                                    729 ;	./src/OSAL.c: 600: }
      0002C1 5B 06            [ 2]  730 	addw	sp, #6
      0002C3 81               [ 4]  731 	ret
                                    732 ;	./src/OSAL.c: 616: uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
                                    733 ;	-----------------------------------------
                                    734 ;	 function osal_msg_enqueue_max
                                    735 ;	-----------------------------------------
      0002C4                        736 _osal_msg_enqueue_max:
      0002C4 52 04            [ 2]  737 	sub	sp, #4
                                    738 ;	./src/OSAL.c: 619: uint8 ret = FALSE;
      0002C6 0F 01            [ 1]  739 	clr	(0x01, sp)
                                    740 ;	./src/OSAL.c: 623: HAL_ENTER_CRITICAL_SECTION(intState);
      0002C8 9B               [ 1]  741 	sim
      0002C9 9D               [ 1]  742 	nop
      0002CA 9D               [ 1]  743 	nop
                                    744 ;	./src/OSAL.c: 626: if ( *q_ptr == NULL )
      0002CB 16 07            [ 2]  745 	ldw	y, (0x07, sp)
      0002CD 17 03            [ 2]  746 	ldw	(0x03, sp), y
      0002CF 93               [ 1]  747 	ldw	x, y
      0002D0 FE               [ 2]  748 	ldw	x, (x)
      0002D1 26 0B            [ 1]  749 	jrne	00114$
                                    750 ;	./src/OSAL.c: 628: *q_ptr = msg_ptr;
      0002D3 1E 03            [ 2]  751 	ldw	x, (0x03, sp)
      0002D5 16 09            [ 2]  752 	ldw	y, (0x09, sp)
      0002D7 FF               [ 2]  753 	ldw	(x), y
                                    754 ;	./src/OSAL.c: 629: ret = TRUE;
      0002D8 A6 01            [ 1]  755 	ld	a, #0x01
      0002DA 6B 01            [ 1]  756 	ld	(0x01, sp), a
      0002DC 20 29            [ 2]  757 	jra	00116$
      0002DE                        758 00114$:
                                    759 ;	./src/OSAL.c: 634: list = *q_ptr;
      0002DE 1F 02            [ 2]  760 	ldw	(0x02, sp), x
                                    761 ;	./src/OSAL.c: 635: max--;
      0002E0 0A 0B            [ 1]  762 	dec	(0x0b, sp)
                                    763 ;	./src/OSAL.c: 636: while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
      0002E2 7B 0B            [ 1]  764 	ld	a, (0x0b, sp)
      0002E4 6B 04            [ 1]  765 	ld	(0x04, sp), a
      0002E6                        766 00108$:
      0002E6 1E 02            [ 2]  767 	ldw	x, (0x02, sp)
      0002E8 1D 00 05         [ 2]  768 	subw	x, #0x0005
      0002EB 1F 02            [ 2]  769 	ldw	(0x02, sp), x
      0002ED FE               [ 2]  770 	ldw	x, (x)
      0002EE 27 0A            [ 1]  771 	jreq	00110$
      0002F0 0D 04            [ 1]  772 	tnz	(0x04, sp)
      0002F2 27 06            [ 1]  773 	jreq	00110$
                                    774 ;	./src/OSAL.c: 638: list = OSAL_MSG_NEXT( list );
      0002F4 1F 02            [ 2]  775 	ldw	(0x02, sp), x
                                    776 ;	./src/OSAL.c: 639: max--;
      0002F6 0A 04            [ 1]  777 	dec	(0x04, sp)
      0002F8 20 EC            [ 2]  778 	jra	00108$
      0002FA                        779 00110$:
                                    780 ;	./src/OSAL.c: 643: if ( max != 0 )
      0002FA 0D 04            [ 1]  781 	tnz	(0x04, sp)
      0002FC 27 09            [ 1]  782 	jreq	00116$
                                    783 ;	./src/OSAL.c: 645: OSAL_MSG_NEXT( list ) = msg_ptr;
      0002FE 1E 02            [ 2]  784 	ldw	x, (0x02, sp)
      000300 16 09            [ 2]  785 	ldw	y, (0x09, sp)
      000302 FF               [ 2]  786 	ldw	(x), y
                                    787 ;	./src/OSAL.c: 646: ret = TRUE;
      000303 A6 01            [ 1]  788 	ld	a, #0x01
      000305 6B 01            [ 1]  789 	ld	(0x01, sp), a
                                    790 ;	./src/OSAL.c: 651: HAL_EXIT_CRITICAL_SECTION(intState);
      000307                        791 00116$:
                                    792 ;	./src/OSAL.c: 653: return ret;
      000307 7B 01            [ 1]  793 	ld	a, (0x01, sp)
                                    794 ;	./src/OSAL.c: 654: }
      000309 5B 04            [ 2]  795 	addw	sp, #4
      00030B 81               [ 4]  796 	ret
                                    797 ;	./src/OSAL.c: 669: uint8 osal_set_event( uint8 task_id, uint16 event_flag )
                                    798 ;	-----------------------------------------
                                    799 ;	 function osal_set_event
                                    800 ;	-----------------------------------------
      00030C                        801 _osal_set_event:
                                    802 ;	./src/OSAL.c: 671: if ( task_id < tasksCnt )
      00030C C6u00u00         [ 1]  803 	ld	a, _tasksCnt+0
      00030F 11 03            [ 1]  804 	cp	a, (0x03, sp)
      000311 23 1A            [ 2]  805 	jrule	00110$
                                    806 ;	./src/OSAL.c: 674: HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
      000313 9B               [ 1]  807 	sim
      000314 9D               [ 1]  808 	nop
      000315 9D               [ 1]  809 	nop
                                    810 ;	./src/OSAL.c: 675: tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
      000316 7B 03            [ 1]  811 	ld	a, (0x03, sp)
      000318 5F               [ 1]  812 	clrw	x
      000319 97               [ 1]  813 	ld	xl, a
      00031A 58               [ 2]  814 	sllw	x
      00031B 72 BBu00u00      [ 2]  815 	addw	x, _tasksEvents+0
      00031F 90 93            [ 1]  816 	ldw	y, x
      000321 FE               [ 2]  817 	ldw	x, (x)
      000322 9F               [ 1]  818 	ld	a, xl
      000323 1A 05            [ 1]  819 	or	a, (0x05, sp)
      000325 02               [ 1]  820 	rlwa	x
      000326 1A 04            [ 1]  821 	or	a, (0x04, sp)
      000328 95               [ 1]  822 	ld	xh, a
      000329 90 FF            [ 2]  823 	ldw	(y), x
                                    824 ;	./src/OSAL.c: 677: return ( SUCCESS );
      00032B 4F               [ 1]  825 	clr	a
      00032C 81               [ 4]  826 	ret
      00032D                        827 00110$:
                                    828 ;	./src/OSAL.c: 681: return ( INVALID_TASK );
      00032D A6 03            [ 1]  829 	ld	a, #0x03
                                    830 ;	./src/OSAL.c: 683: }
      00032F 81               [ 4]  831 	ret
                                    832 ;	./src/OSAL.c: 698: uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
                                    833 ;	-----------------------------------------
                                    834 ;	 function osal_clear_event
                                    835 ;	-----------------------------------------
      000330                        836 _osal_clear_event:
      000330 89               [ 2]  837 	pushw	x
                                    838 ;	./src/OSAL.c: 700: if ( task_id < tasksCnt )
      000331 C6u00u00         [ 1]  839 	ld	a, _tasksCnt+0
      000334 11 05            [ 1]  840 	cp	a, (0x05, sp)
      000336 23 1F            [ 2]  841 	jrule	00110$
                                    842 ;	./src/OSAL.c: 703: HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
      000338 9B               [ 1]  843 	sim
      000339 9D               [ 1]  844 	nop
      00033A 9D               [ 1]  845 	nop
                                    846 ;	./src/OSAL.c: 704: tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
      00033B 7B 05            [ 1]  847 	ld	a, (0x05, sp)
      00033D 5F               [ 1]  848 	clrw	x
      00033E 97               [ 1]  849 	ld	xl, a
      00033F 58               [ 2]  850 	sllw	x
      000340 72 BBu00u00      [ 2]  851 	addw	x, _tasksEvents+0
      000344 90 93            [ 1]  852 	ldw	y, x
      000346 FE               [ 2]  853 	ldw	x, (x)
      000347 1F 01            [ 2]  854 	ldw	(0x01, sp), x
      000349 1E 06            [ 2]  855 	ldw	x, (0x06, sp)
      00034B 53               [ 2]  856 	cplw	x
      00034C 9F               [ 1]  857 	ld	a, xl
      00034D 14 02            [ 1]  858 	and	a, (0x02, sp)
      00034F 02               [ 1]  859 	rlwa	x
      000350 14 01            [ 1]  860 	and	a, (0x01, sp)
      000352 95               [ 1]  861 	ld	xh, a
      000353 90 FF            [ 2]  862 	ldw	(y), x
                                    863 ;	./src/OSAL.c: 706: return ( SUCCESS );
      000355 4F               [ 1]  864 	clr	a
                                    865 ;	./src/OSAL.c: 710: return ( INVALID_TASK );
      000356 C5                     866 	.byte 0xc5
      000357                        867 00110$:
      000357 A6 03            [ 1]  868 	ld	a, #0x03
      000359                        869 00112$:
                                    870 ;	./src/OSAL.c: 712: }
      000359 85               [ 2]  871 	popw	x
      00035A 81               [ 4]  872 	ret
                                    873 ;	./src/OSAL.c: 727: uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
                                    874 ;	-----------------------------------------
                                    875 ;	 function osal_isr_register
                                    876 ;	-----------------------------------------
      00035B                        877 _osal_isr_register:
                                    878 ;	./src/OSAL.c: 732: return ( SUCCESS );
      00035B 4F               [ 1]  879 	clr	a
                                    880 ;	./src/OSAL.c: 733: }
      00035C 81               [ 4]  881 	ret
                                    882 ;	./src/OSAL.c: 752: uint8 osal_int_enable( uint8 interrupt_id )
                                    883 ;	-----------------------------------------
                                    884 ;	 function osal_int_enable
                                    885 ;	-----------------------------------------
      00035D                        886 _osal_int_enable:
                                    887 ;	./src/OSAL.c: 755: if ( interrupt_id == INTS_ALL )
      00035D 7B 03            [ 1]  888 	ld	a, (0x03, sp)
      00035F 4C               [ 1]  889 	inc	a
      000360 26 05            [ 1]  890 	jrne	00105$
                                    891 ;	./src/OSAL.c: 757: HAL_ENABLE_INTERRUPTS();
      000362 9A               [ 1]  892 	rim
      000363 9D               [ 1]  893 	nop
      000364 9D               [ 1]  894 	nop
                                    895 ;	./src/OSAL.c: 758: return ( SUCCESS );
      000365 4F               [ 1]  896 	clr	a
      000366 81               [ 4]  897 	ret
      000367                        898 00105$:
                                    899 ;	./src/OSAL.c: 762: return ( INVALID_INTERRUPT_ID );
      000367 A6 07            [ 1]  900 	ld	a, #0x07
                                    901 ;	./src/OSAL.c: 764: }
      000369 81               [ 4]  902 	ret
                                    903 ;	./src/OSAL.c: 782: uint8 osal_int_disable( uint8 interrupt_id )
                                    904 ;	-----------------------------------------
                                    905 ;	 function osal_int_disable
                                    906 ;	-----------------------------------------
      00036A                        907 _osal_int_disable:
                                    908 ;	./src/OSAL.c: 785: if ( interrupt_id == INTS_ALL )
      00036A 7B 03            [ 1]  909 	ld	a, (0x03, sp)
      00036C 4C               [ 1]  910 	inc	a
      00036D 26 05            [ 1]  911 	jrne	00105$
                                    912 ;	./src/OSAL.c: 787: HAL_DISABLE_INTERRUPTS();
      00036F 9B               [ 1]  913 	sim
      000370 9D               [ 1]  914 	nop
      000371 9D               [ 1]  915 	nop
                                    916 ;	./src/OSAL.c: 788: return ( SUCCESS );
      000372 4F               [ 1]  917 	clr	a
      000373 81               [ 4]  918 	ret
      000374                        919 00105$:
                                    920 ;	./src/OSAL.c: 792: return ( INVALID_INTERRUPT_ID );
      000374 A6 07            [ 1]  921 	ld	a, #0x07
                                    922 ;	./src/OSAL.c: 794: }
      000376 81               [ 4]  923 	ret
                                    924 ;	./src/OSAL.c: 808: uint8 osal_init_system( void )
                                    925 ;	-----------------------------------------
                                    926 ;	 function osal_init_system
                                    927 ;	-----------------------------------------
      000377                        928 _osal_init_system:
                                    929 ;	./src/OSAL.c: 811: osal_mem_init();
      000377 CDr00r00         [ 4]  930 	call	_osal_mem_init
                                    931 ;	./src/OSAL.c: 814: osal_qHead = NULL;
      00037A 5F               [ 1]  932 	clrw	x
      00037B CFu00u00         [ 2]  933 	ldw	_osal_qHead+0, x
                                    934 ;	./src/OSAL.c: 817: osalTimerInit();
      00037E CDr00r00         [ 4]  935 	call	_osalTimerInit
                                    936 ;	./src/OSAL.c: 820: osalInitTasks();
      000381 CDr00r00         [ 4]  937 	call	_osalInitTasks
                                    938 ;	./src/OSAL.c: 823: osal_mem_kick();
      000384 CDr00r00         [ 4]  939 	call	_osal_mem_kick
                                    940 ;	./src/OSAL.c: 825: return ( SUCCESS );
      000387 4F               [ 1]  941 	clr	a
                                    942 ;	./src/OSAL.c: 826: }
      000388 81               [ 4]  943 	ret
                                    944 ;	./src/OSAL.c: 840: void osal_start_system( void )
                                    945 ;	-----------------------------------------
                                    946 ;	 function osal_start_system
                                    947 ;	-----------------------------------------
      000389                        948 _osal_start_system:
      000389                        949 00102$:
                                    950 ;	./src/OSAL.c: 844: osal_run_system();
      000389 CDr03r8F         [ 4]  951 	call	_osal_run_system
      00038C 20 FB            [ 2]  952 	jra	00102$
                                    953 ;	./src/OSAL.c: 846: }
      00038E 81               [ 4]  954 	ret
                                    955 ;	./src/OSAL.c: 862: void osal_run_system( void )
                                    956 ;	-----------------------------------------
                                    957 ;	 function osal_run_system
                                    958 ;	-----------------------------------------
      00038F                        959 _osal_run_system:
      00038F 52 05            [ 2]  960 	sub	sp, #5
                                    961 ;	./src/OSAL.c: 866: do {
      000391 0F 05            [ 1]  962 	clr	(0x05, sp)
      000393                        963 00103$:
                                    964 ;	./src/OSAL.c: 867: if (tasksEvents[idx])  // Task is highest priority that is ready.
      000393 7B 05            [ 1]  965 	ld	a, (0x05, sp)
      000395 5F               [ 1]  966 	clrw	x
      000396 97               [ 1]  967 	ld	xl, a
      000397 58               [ 2]  968 	sllw	x
      000398 72 BBu00u00      [ 2]  969 	addw	x, _tasksEvents+0
      00039C FE               [ 2]  970 	ldw	x, (x)
                                    971 ;	./src/OSAL.c: 871: } while (++idx < tasksCnt);
      00039D C6u00u00         [ 1]  972 	ld	a, _tasksCnt+0
                                    973 ;	./src/OSAL.c: 867: if (tasksEvents[idx])  // Task is highest priority that is ready.
      0003A0 5D               [ 2]  974 	tnzw	x
      0003A1 26 06            [ 1]  975 	jrne	00105$
                                    976 ;	./src/OSAL.c: 871: } while (++idx < tasksCnt);
      0003A3 0C 05            [ 1]  977 	inc	(0x05, sp)
      0003A5 11 05            [ 1]  978 	cp	a, (0x05, sp)
      0003A7 22 EA            [ 1]  979 	jrugt	00103$
      0003A9                        980 00105$:
                                    981 ;	./src/OSAL.c: 873: if (idx < tasksCnt)
      0003A9 11 05            [ 1]  982 	cp	a, (0x05, sp)
      0003AB 23 45            [ 2]  983 	jrule	00124$
                                    984 ;	./src/OSAL.c: 878: HAL_ENTER_CRITICAL_SECTION(intState);
      0003AD 9B               [ 1]  985 	sim
      0003AE 9D               [ 1]  986 	nop
      0003AF 9D               [ 1]  987 	nop
                                    988 ;	./src/OSAL.c: 879: events = tasksEvents[idx];
      0003B0 5F               [ 1]  989 	clrw	x
      0003B1 7B 05            [ 1]  990 	ld	a, (0x05, sp)
      0003B3 97               [ 1]  991 	ld	xl, a
      0003B4 58               [ 2]  992 	sllw	x
      0003B5 1F 03            [ 2]  993 	ldw	(0x03, sp), x
      0003B7 CEu00u00         [ 2]  994 	ldw	x, _tasksEvents+0
      0003BA 72 FB 03         [ 2]  995 	addw	x, (0x03, sp)
      0003BD 90 93            [ 1]  996 	ldw	y, x
      0003BF 90 FE            [ 2]  997 	ldw	y, (y)
                                    998 ;	./src/OSAL.c: 880: tasksEvents[idx] = 0;  // Clear the Events for this task.
      0003C1 6F 01            [ 1]  999 	clr	(0x1, x)
      0003C3 7F               [ 1] 1000 	clr	(x)
                                   1001 ;	./src/OSAL.c: 883: activeTaskID = idx;
      0003C4 7B 05            [ 1] 1002 	ld	a, (0x05, sp)
      0003C6 C7u00u00         [ 1] 1003 	ld	_activeTaskID+0, a
                                   1004 ;	./src/OSAL.c: 884: events = (tasksArr[idx])( idx, events );
      0003C9 1E 03            [ 2] 1005 	ldw	x, (0x03, sp)
      0003CB 1Cr00r00         [ 2] 1006 	addw	x, #(_tasksArr + 0)
      0003CE FE               [ 2] 1007 	ldw	x, (x)
      0003CF 90 89            [ 2] 1008 	pushw	y
      0003D1 7B 07            [ 1] 1009 	ld	a, (0x07, sp)
      0003D3 88               [ 1] 1010 	push	a
      0003D4 FD               [ 4] 1011 	call	(x)
      0003D5 5B 03            [ 2] 1012 	addw	sp, #3
      0003D7 1F 01            [ 2] 1013 	ldw	(0x01, sp), x
                                   1014 ;	./src/OSAL.c: 885: activeTaskID = TASK_NO_TASK;
      0003D9 35 FFu00u00      [ 1] 1015 	mov	_activeTaskID+0, #0xff
                                   1016 ;	./src/OSAL.c: 887: HAL_ENTER_CRITICAL_SECTION(intState);
      0003DD 9B               [ 1] 1017 	sim
      0003DE 9D               [ 1] 1018 	nop
      0003DF 9D               [ 1] 1019 	nop
                                   1020 ;	./src/OSAL.c: 888: tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
      0003E0 90 CEu00u00      [ 2] 1021 	ldw	y, _tasksEvents+0
      0003E4 72 F9 03         [ 2] 1022 	addw	y, (0x03, sp)
      0003E7 93               [ 1] 1023 	ldw	x, y
      0003E8 FE               [ 2] 1024 	ldw	x, (x)
      0003E9 9F               [ 1] 1025 	ld	a, xl
      0003EA 1A 02            [ 1] 1026 	or	a, (0x02, sp)
      0003EC 02               [ 1] 1027 	rlwa	x
      0003ED 1A 01            [ 1] 1028 	or	a, (0x01, sp)
      0003EF 95               [ 1] 1029 	ld	xh, a
      0003F0 90 FF            [ 2] 1030 	ldw	(y), x
                                   1031 ;	./src/OSAL.c: 889: HAL_EXIT_CRITICAL_SECTION(intState);
      0003F2                       1032 00124$:
                                   1033 ;	./src/OSAL.c: 892: }
      0003F2 5B 05            [ 2] 1034 	addw	sp, #5
      0003F4 81               [ 4] 1035 	ret
                                   1036 ;	./src/OSAL.c: 908: uint8 osal_self( void )
                                   1037 ;	-----------------------------------------
                                   1038 ;	 function osal_self
                                   1039 ;	-----------------------------------------
      0003F5                       1040 _osal_self:
                                   1041 ;	./src/OSAL.c: 910: return ( activeTaskID );
      0003F5 C6u00u00         [ 1] 1042 	ld	a, _activeTaskID+0
                                   1043 ;	./src/OSAL.c: 911: }
      0003F8 81               [ 4] 1044 	ret
                                   1045 	.area CODE
                                   1046 	.area CONST
                                   1047 	.area INITIALIZER
      000000                       1048 __xinit__activeTaskID:
      000000 FF                    1049 	.db #0xff	; 255
                                   1050 	.area CABS (ABS)
